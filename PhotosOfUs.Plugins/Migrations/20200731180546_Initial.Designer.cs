// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotosOfUs.Model.Models;

namespace PhotosOfUs.Plugins.Migrations
{
    [DbContext(typeof(PhotosOfUsContext))]
    [Migration("20200731180546_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PhotosOfUs.Core.Events.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccentColorCode");

                    b.Property<string>("BackgroundColorCode");

                    b.Property<string>("BodyColorCode");

                    b.Property<int>("BrandingStyle");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description");

                    b.Property<string>("FeaturedImageUrl");

                    b.Property<string>("HeaderColorCode");

                    b.Property<string>("HomepageTemplate");

                    b.Property<string>("Name");

                    b.Property<string>("OverlayColorCode");

                    b.Property<decimal?>("OverlayOpacity");

                    b.Property<string>("PersonalLogoUrl");

                    b.Property<string>("SeparatorStyle");

                    b.Property<int>("SeparatorThickness");

                    b.Property<int>("SeparatorWidth");

                    b.Property<string>("Url");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<bool>("IsBillingAddress");

                    b.Property<bool>("IsShippingAddress");

                    b.Property<string>("Line1");

                    b.Property<string>("Line2");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingAddressId");

                    b.Property<DateTime>("OrderDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("ShippingAddressId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.PrintPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PhotoId");

                    b.Property<int>("PhotographerId");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.ToTable("PrintPrice");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.PrintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseCost");

                    b.Property<string>("Height");

                    b.Property<string>("Icon");

                    b.Property<string>("Length");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("PrintType");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Photos.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("PhotographerId");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Photos.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CardId");

                    b.Property<int?>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("PhotographerId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("PublicProfile");

                    b.Property<DateTime>("UploadDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PhotographerId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Photos.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AzureId")
                        .HasColumnName("AzureID");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreateDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DashboardTour");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Dribbble");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("FirstName");

                    b.Property<string>("Instagram");

                    b.Property<bool?>("IsDeactivated");

                    b.Property<bool?>("IsPhotographer");

                    b.Property<string>("JobPosition");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("LastName");

                    b.Property<bool?>("PhotoTour");

                    b.Property<string>("ProfilePhotoUrl");

                    b.Property<bool?>("PurchaseTour");

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<int>("TemplateSelected");

                    b.Property<string>("Twitter");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PhotosOfUs.Core.Events.Event", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("PhotosOfUs.Core.Events.Card", "Cards", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Code");

                            b1.Property<DateTime>("CreatedDateUtc")
                                .HasColumnType("datetime");

                            b1.Property<int>("EventId");

                            b1.HasKey("Id");

                            b1.HasIndex("EventId");

                            b1.ToTable("Card");

                            b1.HasOne("PhotosOfUs.Core.Events.Event")
                                .WithMany("Cards")
                                .HasForeignKey("EventId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.Address", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Users.User")
                        .WithOne("Address")
                        .HasForeignKey("PhotosOfUs.Core.Orders.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.Order", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Orders.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotosOfUs.Core.Orders.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("PhotosOfUs.Core.Orders.OrderDetail", "OrderDetails", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("OrderId");

                            b1.Property<int>("PhotoId");

                            b1.Property<int>("PrintTypeId");

                            b1.Property<int>("Quantity");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(19, 4)");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderId");

                            b1.HasIndex("PrintTypeId");

                            b1.ToTable("OrderDetail");

                            b1.HasOne("PhotosOfUs.Core.Orders.Order")
                                .WithMany("OrderDetails")
                                .HasForeignKey("OrderId")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("PhotosOfUs.Core.Orders.PrintType", "PrintType")
                                .WithMany()
                                .HasForeignKey("PrintTypeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PhotosOfUs.Core.Orders.PrintPrice", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Users.User", "Photographer")
                        .WithMany()
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhotosOfUs.Core.Photos.Folder", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Users.User", "Photographer")
                        .WithMany()
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PhotosOfUs.Core.Photos.Photo", b =>
                {
                    b.HasOne("PhotosOfUs.Core.Events.Event", "Event")
                        .WithMany("Photos")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotosOfUs.Core.Users.User", "Photographer")
                        .WithMany()
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("PhotosOfUs.Core.Photos.PhotoTag", "PhotoTag", b1 =>
                        {
                            b1.Property<int>("PhotoId");

                            b1.Property<int>("TagId");

                            b1.Property<DateTime>("RegisterDateUtc")
                                .HasColumnType("datetime");

                            b1.HasKey("PhotoId", "TagId");

                            b1.HasIndex("TagId");

                            b1.ToTable("PhotoTag");

                            b1.HasOne("PhotosOfUs.Core.Photos.Photo", "Photo")
                                .WithMany("PhotoTag")
                                .HasForeignKey("PhotoId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("PhotosOfUs.Core.Photos.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PhotosOfUs.Core.Users.User", b =>
                {
                    b.OwnsMany("PhotosOfUs.Core.Users.UserIdentity", "UserIdentities", b1 =>
                        {
                            b1.Property<string>("AzureID");

                            b1.Property<DateTime>("CreateDateUtc")
                                .HasColumnType("datetime");

                            b1.Property<string>("IdentityProvider");

                            b1.Property<DateTime?>("LastLoginDateUtc")
                                .HasColumnType("datetime");

                            b1.Property<int>("UserID");

                            b1.HasKey("AzureID");

                            b1.HasIndex("UserID");

                            b1.ToTable("UserIdentity");

                            b1.HasOne("PhotosOfUs.Core.Users.User", "User")
                                .WithMany("UserIdentities")
                                .HasForeignKey("UserID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
