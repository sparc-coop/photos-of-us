/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.11.0 (NJsonSchema v9.13.13.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace PhotosOfUs {

export class PhotographerClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    uploadProfilePhoto(contentType: string | null | undefined, contentDisposition: string | null | undefined, headers: IHeaderDictionary | null | undefined, length: number | undefined, name: string | null | undefined, fileName: string | null | undefined): ng.IPromise<UploadPhotoCommandResult | null> {
        let url_ = this.baseUrl + "/api/Photographer/ProfilePhoto?";
        if (contentType !== undefined)
            url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&"; 
        if (contentDisposition !== undefined)
            url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&"; 
        if (headers !== undefined)
            url_ += "Headers=" + encodeURIComponent("" + headers) + "&"; 
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadProfilePhoto(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadProfilePhoto(_response);
            throw _response;
        });
    }

    protected processUploadProfilePhoto(response: any): ng.IPromise<UploadPhotoCommandResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPhotoCommandResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<UploadPhotoCommandResult | null>(<any>null);
    }

    uploadProfileImage(contentType: string | null | undefined, contentDisposition: string | null | undefined, headers: IHeaderDictionary | null | undefined, length: number | undefined, name: string | null | undefined, fileName: string | null | undefined, photoName: string | null | undefined, extension: string | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Photographer?";
        if (contentType !== undefined)
            url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&"; 
        if (contentDisposition !== undefined)
            url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&"; 
        if (headers !== undefined)
            url_ += "Headers=" + encodeURIComponent("" + headers) + "&"; 
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        if (photoName !== undefined)
            url_ += "photoName=" + encodeURIComponent("" + photoName) + "&"; 
        if (extension !== undefined)
            url_ += "extension=" + encodeURIComponent("" + extension) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "UNDEFINED",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadProfileImage(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadProfileImage(_response);
            throw _response;
        });
    }

    protected processUploadProfileImage(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }
}

export class EventApiClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): ng.IPromise<Event[] | null> {
        let url_ = this.baseUrl + "/api/Event";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetAll(_response);
            throw _response;
        });
    }

    protected processGetAll(response: any): ng.IPromise<Event[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Event.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Event[] | null>(<any>null);
    }

    get(eventId: number): ng.IPromise<Event | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGet(_response);
            throw _response;
        });
    }

    protected processGet(response: any): ng.IPromise<Event | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Event.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Event | null>(<any>null);
    }

    save(evt: Event): ng.IPromise<Event | null> {
        let url_ = this.baseUrl + "/api/Event/Events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(evt);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processSave(_response);
        }, (_response) => {
            if (_response.status)
                return this.processSave(_response);
            throw _response;
        });
    }

    protected processSave(response: any): ng.IPromise<Event | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Event.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Event | null>(<any>null);
    }

    getEventCards(eventId: number): ng.IPromise<Card[] | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/Cards";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetEventCards(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetEventCards(_response);
            throw _response;
        });
    }

    protected processGetEventCards(response: any): ng.IPromise<Card[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Card.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Card[] | null>(<any>null);
    }

    createEventCards(eventId: number, quantity: number): ng.IPromise<Card[] | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/Cards";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quantity);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateEventCards(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateEventCards(_response);
            throw _response;
        });
    }

    protected processCreateEventCards(response: any): ng.IPromise<Card[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Card.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Card[] | null>(<any>null);
    }

    getCodePhotos(eventId: number, code: string | null): ng.IPromise<PhotoViewModel[] | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/Cards/{code}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetCodePhotos(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetCodePhotos(_response);
            throw _response;
        });
    }

    protected processGetCodePhotos(response: any): ng.IPromise<PhotoViewModel[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoViewModel.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<PhotoViewModel[] | null>(<any>null);
    }

    uploadPhoto(eventId: number, photoCode: string | null | undefined, contentType: string | null | undefined, contentDisposition: string | null | undefined, headers: IHeaderDictionary | null | undefined, length: number | undefined, name: string | null | undefined, fileName: string | null | undefined): ng.IPromise<UploadPhotoCommandResult | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/Photos?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (photoCode !== undefined)
            url_ += "photoCode=" + encodeURIComponent("" + photoCode) + "&"; 
        if (contentType !== undefined)
            url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&"; 
        if (contentDisposition !== undefined)
            url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&"; 
        if (headers !== undefined)
            url_ += "Headers=" + encodeURIComponent("" + headers) + "&"; 
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadPhoto(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadPhoto(_response);
            throw _response;
        });
    }

    protected processUploadPhoto(response: any): ng.IPromise<UploadPhotoCommandResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPhotoCommandResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<UploadPhotoCommandResult | null>(<any>null);
    }

    uploadCoverPhoto(contentType: string | null | undefined, contentDisposition: string | null | undefined, headers: IHeaderDictionary | null | undefined, length: number | undefined, name: string | null | undefined, fileName: string | null | undefined): ng.IPromise<UploadPhotoCommandResult | null> {
        let url_ = this.baseUrl + "/api/Event/Photos?";
        if (contentType !== undefined)
            url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&"; 
        if (contentDisposition !== undefined)
            url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&"; 
        if (headers !== undefined)
            url_ += "Headers=" + encodeURIComponent("" + headers) + "&"; 
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "Length=" + encodeURIComponent("" + length) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadCoverPhoto(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadCoverPhoto(_response);
            throw _response;
        });
    }

    protected processUploadCoverPhoto(response: any): ng.IPromise<UploadPhotoCommandResult | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPhotoCommandResult.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<UploadPhotoCommandResult | null>(<any>null);
    }

    getAllTags(eventId: number): ng.IPromise<TagViewModel[] | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/Tags";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetAllTags(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetAllTags(_response);
            throw _response;
        });
    }

    protected processGetAllTags(response: any): ng.IPromise<TagViewModel[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TagViewModel.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<TagViewModel[] | null>(<any>null);
    }

    bulkEdit(eventId: number, photoIds: number[] | null | undefined): ng.IPromise<TagViewModel[] | null> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/BulkEdit?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (photoIds !== undefined)
            photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processBulkEdit(_response);
        }, (_response) => {
            if (_response.status)
                return this.processBulkEdit(_response);
            throw _response;
        });
    }

    protected processBulkEdit(response: any): ng.IPromise<TagViewModel[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TagViewModel.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<TagViewModel[] | null>(<any>null);
    }

    bulkEditSave(eventId: number, photoIds: number[] | null | undefined, model: BulkEditModel): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/BulkEdit?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (photoIds !== undefined)
            photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.http(options_).then((_response) => {
            return this.processBulkEditSave(_response);
        }, (_response) => {
            if (_response.status)
                return this.processBulkEditSave(_response);
            throw _response;
        });
    }

    protected processBulkEditSave(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    bulkDelete(eventId: number, photoIds: number[] | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Event/{eventId}/BulkEdit?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (photoIds !== undefined)
            photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processBulkDelete(_response);
        }, (_response) => {
            if (_response.status)
                return this.processBulkDelete(_response);
            throw _response;
        });
    }

    protected processBulkDelete(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    cardsPdf(json: string | null | undefined): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Event/CardsPdf?";
        if (json !== undefined)
            url_ += "json=" + encodeURIComponent("" + json) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "UNDEFINED",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCardsPdf(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCardsPdf(_response);
            throw _response;
        });
    }

    protected processCardsPdf(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }
}

export class FolderApiClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    post(name: string | null): ng.IPromise<FolderViewModel | null> {
        let url_ = this.baseUrl + "/api/Folder/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processPost(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPost(_response);
            throw _response;
        });
    }

    protected processPost(response: any): ng.IPromise<FolderViewModel | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FolderViewModel.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<FolderViewModel | null>(<any>null);
    }

    put(id: number | undefined, newName: string | null | undefined): ng.IPromise<FolderViewModel | null> {
        let url_ = this.baseUrl + "/api/Folder?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (newName !== undefined)
            url_ += "newName=" + encodeURIComponent("" + newName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processPut(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPut(_response);
            throw _response;
        });
    }

    protected processPut(response: any): ng.IPromise<FolderViewModel | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FolderViewModel.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<FolderViewModel | null>(<any>null);
    }

    deleteFolder(id: number | undefined): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Folder?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            responseType: "arraybuffer",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processDeleteFolder(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeleteFolder(_response);
            throw _response;
        });
    }

    protected processDeleteFolder(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }
}

export class RandomPhotoClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): ng.IPromise<PhotoViewModel | null> {
        let url_ = this.baseUrl + "/api/RandomPhotos";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGet(_response);
            throw _response;
        });
    }

    protected processGet(response: any): ng.IPromise<PhotoViewModel | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PhotoViewModel.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<PhotoViewModel | null>(<any>null);
    }
}

export class UserApiClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): ng.IPromise<UserViewModel | null> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGet(_response);
            throw _response;
        });
    }

    protected processGet(response: any): ng.IPromise<UserViewModel | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserViewModel.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<UserViewModel | null>(<any>null);
    }

    put(model: UserProfileUpdateCommandModel): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "PUT",
            responseType: "arraybuffer",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processPut(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPut(_response);
            throw _response;
        });
    }

    protected processPut(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    deactivateAccount(): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processDeactivateAccount(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDeactivateAccount(_response);
            throw _response;
        });
    }

    protected processDeactivateAccount(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    reactivateAccount(): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processReactivateAccount(_response);
        }, (_response) => {
            if (_response.status)
                return this.processReactivateAccount(_response);
            throw _response;
        });
    }

    protected processReactivateAccount(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    getFolders(id: number | undefined): ng.IPromise<FolderViewModel[] | null> {
        let url_ = this.baseUrl + "/api/User/Folders?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetFolders(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetFolders(_response);
            throw _response;
        });
    }

    protected processGetFolders(response: any): ng.IPromise<FolderViewModel[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(FolderViewModel.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<FolderViewModel[] | null>(<any>null);
    }

    getProfilePhotos(userId: number): ng.IPromise<Photo[] | null> {
        let url_ = this.baseUrl + "/api/User/GetProfilePhotos/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetProfilePhotos(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetProfilePhotos(_response);
            throw _response;
        });
    }

    protected processGetProfilePhotos(response: any): ng.IPromise<Photo[] | null> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Photo.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Photo[] | null>(<any>null);
    }

    viewedPricingInfo(userId: number): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/User/ViewedPricing/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processViewedPricingInfo(_response);
        }, (_response) => {
            if (_response.status)
                return this.processViewedPricingInfo(_response);
            throw _response;
        });
    }

    protected processViewedPricingInfo(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    viewedDashboardTour(userId: number): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/User/ViewedDashboard/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processViewedDashboardTour(_response);
        }, (_response) => {
            if (_response.status)
                return this.processViewedDashboardTour(_response);
            throw _response;
        });
    }

    protected processViewedDashboardTour(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    viewedPhotoTour(userId: number): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/User/ViewedPhoto/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [], 
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processViewedPhotoTour(_response);
        }, (_response) => {
            if (_response.status)
                return this.processViewedPhotoTour(_response);
            throw _response;
        });
    }

    protected processViewedPhotoTour(response: any): ng.IPromise<void> {
        const status = response.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }
}

export class UploadPhotoCommandResult implements IUploadPhotoCommandResult {
    suggestedTags?: string[] | null;
    code?: string | null;
    url?: string | null;
    isValid!: boolean;

    constructor(data?: IUploadPhotoCommandResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["suggestedTags"] && data["suggestedTags"].constructor === Array) {
                this.suggestedTags = [];
                for (let item of data["suggestedTags"])
                    this.suggestedTags.push(item);
            }
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.isValid = data["isValid"] !== undefined ? data["isValid"] : <any>null;
        }
    }

    static fromJS(data: any): UploadPhotoCommandResult {
        data = typeof data === 'object' ? data : {};
        let result = new UploadPhotoCommandResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.suggestedTags && this.suggestedTags.constructor === Array) {
            data["suggestedTags"] = [];
            for (let item of this.suggestedTags)
                data["suggestedTags"].push(item);
        }
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        return data; 
    }
}

export interface IUploadPhotoCommandResult {
    suggestedTags?: string[] | null;
    code?: string | null;
    url?: string | null;
    isValid: boolean;
}

export abstract class IHeaderDictionary implements IIHeaderDictionary {
    item!: string[];
    contentLength?: number | null;

    constructor(data?: IIHeaderDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item = [];
        }
    }

    init(data?: any) {
        if (data) {
            if (data["item"] && data["item"].constructor === Array) {
                this.item = [];
                for (let item of data["item"])
                    this.item.push(item);
            }
            this.contentLength = data["contentLength"] !== undefined ? data["contentLength"] : <any>null;
        }
    }

    static fromJS(data: any): IHeaderDictionary {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IHeaderDictionary' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.item && this.item.constructor === Array) {
            data["item"] = [];
            for (let item of this.item)
                data["item"].push(item);
        }
        data["contentLength"] = this.contentLength !== undefined ? this.contentLength : <any>null;
        return data; 
    }
}

export interface IIHeaderDictionary {
    item: string[];
    contentLength?: number | null;
}

export class Event implements IEvent {
    eventId!: number;
    userId!: number;
    name?: string | null;
    url?: string | null;
    description?: string | null;
    createdDate!: Date;
    homepageTemplate?: string | null;
    personalLogoUrl?: string | null;
    featuredImageUrl?: string | null;
    overlayColorCode?: string | null;
    overlayOpacity?: number | null;
    accentColorCode?: string | null;
    backgroundColorCode?: string | null;
    headerColorCode?: string | null;
    bodyColorCode?: string | null;
    separatorStyle?: string | null;
    separatorThickness!: number;
    separatorWidth!: number;
    brandingStyle!: number;
    cards?: Card[] | null;
    photos?: Photo[] | null;
    user?: User | null;

    constructor(data?: IEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.eventId = data["eventId"] !== undefined ? data["eventId"] : <any>null;
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            this.homepageTemplate = data["homepageTemplate"] !== undefined ? data["homepageTemplate"] : <any>null;
            this.personalLogoUrl = data["personalLogoUrl"] !== undefined ? data["personalLogoUrl"] : <any>null;
            this.featuredImageUrl = data["featuredImageUrl"] !== undefined ? data["featuredImageUrl"] : <any>null;
            this.overlayColorCode = data["overlayColorCode"] !== undefined ? data["overlayColorCode"] : <any>null;
            this.overlayOpacity = data["overlayOpacity"] !== undefined ? data["overlayOpacity"] : <any>null;
            this.accentColorCode = data["accentColorCode"] !== undefined ? data["accentColorCode"] : <any>null;
            this.backgroundColorCode = data["backgroundColorCode"] !== undefined ? data["backgroundColorCode"] : <any>null;
            this.headerColorCode = data["headerColorCode"] !== undefined ? data["headerColorCode"] : <any>null;
            this.bodyColorCode = data["bodyColorCode"] !== undefined ? data["bodyColorCode"] : <any>null;
            this.separatorStyle = data["separatorStyle"] !== undefined ? data["separatorStyle"] : <any>null;
            this.separatorThickness = data["separatorThickness"] !== undefined ? data["separatorThickness"] : <any>null;
            this.separatorWidth = data["separatorWidth"] !== undefined ? data["separatorWidth"] : <any>null;
            this.brandingStyle = data["brandingStyle"] !== undefined ? data["brandingStyle"] : <any>null;
            if (data["cards"] && data["cards"].constructor === Array) {
                this.cards = [];
                for (let item of data["cards"])
                    this.cards.push(Card.fromJS(item));
            }
            if (data["photos"] && data["photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["photos"])
                    this.photos.push(Photo.fromJS(item));
            }
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>null;
        }
    }

    static fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["homepageTemplate"] = this.homepageTemplate !== undefined ? this.homepageTemplate : <any>null;
        data["personalLogoUrl"] = this.personalLogoUrl !== undefined ? this.personalLogoUrl : <any>null;
        data["featuredImageUrl"] = this.featuredImageUrl !== undefined ? this.featuredImageUrl : <any>null;
        data["overlayColorCode"] = this.overlayColorCode !== undefined ? this.overlayColorCode : <any>null;
        data["overlayOpacity"] = this.overlayOpacity !== undefined ? this.overlayOpacity : <any>null;
        data["accentColorCode"] = this.accentColorCode !== undefined ? this.accentColorCode : <any>null;
        data["backgroundColorCode"] = this.backgroundColorCode !== undefined ? this.backgroundColorCode : <any>null;
        data["headerColorCode"] = this.headerColorCode !== undefined ? this.headerColorCode : <any>null;
        data["bodyColorCode"] = this.bodyColorCode !== undefined ? this.bodyColorCode : <any>null;
        data["separatorStyle"] = this.separatorStyle !== undefined ? this.separatorStyle : <any>null;
        data["separatorThickness"] = this.separatorThickness !== undefined ? this.separatorThickness : <any>null;
        data["separatorWidth"] = this.separatorWidth !== undefined ? this.separatorWidth : <any>null;
        data["brandingStyle"] = this.brandingStyle !== undefined ? this.brandingStyle : <any>null;
        if (this.cards && this.cards.constructor === Array) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        if (this.photos && this.photos.constructor === Array) {
            data["photos"] = [];
            for (let item of this.photos)
                data["photos"].push(item.toJSON());
        }
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data; 
    }
}

export interface IEvent {
    eventId: number;
    userId: number;
    name?: string | null;
    url?: string | null;
    description?: string | null;
    createdDate: Date;
    homepageTemplate?: string | null;
    personalLogoUrl?: string | null;
    featuredImageUrl?: string | null;
    overlayColorCode?: string | null;
    overlayOpacity?: number | null;
    accentColorCode?: string | null;
    backgroundColorCode?: string | null;
    headerColorCode?: string | null;
    bodyColorCode?: string | null;
    separatorStyle?: string | null;
    separatorThickness: number;
    separatorWidth: number;
    brandingStyle: number;
    cards?: Card[] | null;
    photos?: Photo[] | null;
    user?: User | null;
}

export class Card implements ICard {
    id!: number;
    eventId!: number;
    code?: string | null;
    createdDate!: Date;
    photos?: Photo[] | null;

    constructor(data?: ICard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.eventId = data["eventId"] !== undefined ? data["eventId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            if (data["photos"] && data["photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["photos"])
                    this.photos.push(Photo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Card {
        data = typeof data === 'object' ? data : {};
        let result = new Card();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        if (this.photos && this.photos.constructor === Array) {
            data["photos"] = [];
            for (let item of this.photos)
                data["photos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICard {
    id: number;
    eventId: number;
    code?: string | null;
    createdDate: Date;
    photos?: Photo[] | null;
}

export class Photo implements IPhoto {
    id!: number;
    photographerId!: number;
    url?: string | null;
    price?: number | null;
    name?: string | null;
    uploadDate!: Date;
    publicProfile!: boolean;
    isDeleted!: boolean;
    eventId?: number | null;
    cardId?: number | null;
    photographer?: User | null;
    photoTag?: PhotoTag[] | null;
    printType?: PrintType[] | null;
    filename?: string | null;
    folderName?: string | null;
    fileSize?: string | null;
    resolution?: string | null;
    stream?: Stream | null;
    thumbnailUrl?: string | null;
    waterMarkUrl?: string | null;

    constructor(data?: IPhoto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.photographerId = data["photographerId"] !== undefined ? data["photographerId"] : <any>null;
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.price = data["price"] !== undefined ? data["price"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.uploadDate = data["uploadDate"] ? new Date(data["uploadDate"].toString()) : <any>null;
            this.publicProfile = data["publicProfile"] !== undefined ? data["publicProfile"] : <any>null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : <any>null;
            this.eventId = data["eventId"] !== undefined ? data["eventId"] : <any>null;
            this.cardId = data["cardId"] !== undefined ? data["cardId"] : <any>null;
            this.photographer = data["photographer"] ? User.fromJS(data["photographer"]) : <any>null;
            if (data["photoTag"] && data["photoTag"].constructor === Array) {
                this.photoTag = [];
                for (let item of data["photoTag"])
                    this.photoTag.push(PhotoTag.fromJS(item));
            }
            if (data["printType"] && data["printType"].constructor === Array) {
                this.printType = [];
                for (let item of data["printType"])
                    this.printType.push(PrintType.fromJS(item));
            }
            this.filename = data["filename"] !== undefined ? data["filename"] : <any>null;
            this.folderName = data["folderName"] !== undefined ? data["folderName"] : <any>null;
            this.fileSize = data["fileSize"] !== undefined ? data["fileSize"] : <any>null;
            this.resolution = data["resolution"] !== undefined ? data["resolution"] : <any>null;
            this.stream = data["stream"] ? Stream.fromJS(data["stream"]) : <any>null;
            this.thumbnailUrl = data["thumbnailUrl"] !== undefined ? data["thumbnailUrl"] : <any>null;
            this.waterMarkUrl = data["waterMarkUrl"] !== undefined ? data["waterMarkUrl"] : <any>null;
        }
    }

    static fromJS(data: any): Photo {
        data = typeof data === 'object' ? data : {};
        let result = new Photo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photographerId"] = this.photographerId !== undefined ? this.photographerId : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>null;
        data["publicProfile"] = this.publicProfile !== undefined ? this.publicProfile : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["cardId"] = this.cardId !== undefined ? this.cardId : <any>null;
        data["photographer"] = this.photographer ? this.photographer.toJSON() : <any>null;
        if (this.photoTag && this.photoTag.constructor === Array) {
            data["photoTag"] = [];
            for (let item of this.photoTag)
                data["photoTag"].push(item.toJSON());
        }
        if (this.printType && this.printType.constructor === Array) {
            data["printType"] = [];
            for (let item of this.printType)
                data["printType"].push(item.toJSON());
        }
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["folderName"] = this.folderName !== undefined ? this.folderName : <any>null;
        data["fileSize"] = this.fileSize !== undefined ? this.fileSize : <any>null;
        data["resolution"] = this.resolution !== undefined ? this.resolution : <any>null;
        data["stream"] = this.stream ? this.stream.toJSON() : <any>null;
        data["thumbnailUrl"] = this.thumbnailUrl !== undefined ? this.thumbnailUrl : <any>null;
        data["waterMarkUrl"] = this.waterMarkUrl !== undefined ? this.waterMarkUrl : <any>null;
        return data; 
    }
}

export interface IPhoto {
    id: number;
    photographerId: number;
    url?: string | null;
    price?: number | null;
    name?: string | null;
    uploadDate: Date;
    publicProfile: boolean;
    isDeleted: boolean;
    eventId?: number | null;
    cardId?: number | null;
    photographer?: User | null;
    photoTag?: PhotoTag[] | null;
    printType?: PrintType[] | null;
    filename?: string | null;
    folderName?: string | null;
    fileSize?: string | null;
    resolution?: string | null;
    stream?: Stream | null;
    thumbnailUrl?: string | null;
    waterMarkUrl?: string | null;
}

export class User implements IUser {
    id!: number;
    azureId?: string | null;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    createDate!: Date;
    isPhotographer?: boolean | null;
    isDeactivated?: boolean | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    templateSelected!: number;
    purchaseTour?: boolean | null;
    dashboardTour?: boolean | null;
    photoTour?: boolean | null;
    fullName?: string | null;
    socialMedia?: SocialMedia[] | null;
    folders?: Folder[] | null;
    order?: Order[] | null;
    photos?: Photo[] | null;
    printPrice?: PrintPrice[] | null;
    userIdentities?: UserIdentity[] | null;
    address?: Address | null;
    publicFolder?: Folder | null;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.azureId = data["azureId"] !== undefined ? data["azureId"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.jobPosition = data["jobPosition"] !== undefined ? data["jobPosition"] : <any>null;
            this.bio = data["bio"] !== undefined ? data["bio"] : <any>null;
            this.profilePhotoUrl = data["profilePhotoUrl"] !== undefined ? data["profilePhotoUrl"] : <any>null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>null;
            this.isPhotographer = data["isPhotographer"] !== undefined ? data["isPhotographer"] : <any>null;
            this.isDeactivated = data["isDeactivated"] !== undefined ? data["isDeactivated"] : <any>null;
            this.facebook = data["facebook"] !== undefined ? data["facebook"] : <any>null;
            this.twitter = data["twitter"] !== undefined ? data["twitter"] : <any>null;
            this.instagram = data["instagram"] !== undefined ? data["instagram"] : <any>null;
            this.dribbble = data["dribbble"] !== undefined ? data["dribbble"] : <any>null;
            this.templateSelected = data["templateSelected"] !== undefined ? data["templateSelected"] : <any>null;
            this.purchaseTour = data["purchaseTour"] !== undefined ? data["purchaseTour"] : <any>null;
            this.dashboardTour = data["dashboardTour"] !== undefined ? data["dashboardTour"] : <any>null;
            this.photoTour = data["photoTour"] !== undefined ? data["photoTour"] : <any>null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : <any>null;
            if (data["socialMedia"] && data["socialMedia"].constructor === Array) {
                this.socialMedia = [];
                for (let item of data["socialMedia"])
                    this.socialMedia.push(SocialMedia.fromJS(item));
            }
            if (data["folders"] && data["folders"].constructor === Array) {
                this.folders = [];
                for (let item of data["folders"])
                    this.folders.push(Folder.fromJS(item));
            }
            if (data["order"] && data["order"].constructor === Array) {
                this.order = [];
                for (let item of data["order"])
                    this.order.push(Order.fromJS(item));
            }
            if (data["photos"] && data["photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["photos"])
                    this.photos.push(Photo.fromJS(item));
            }
            if (data["printPrice"] && data["printPrice"].constructor === Array) {
                this.printPrice = [];
                for (let item of data["printPrice"])
                    this.printPrice.push(PrintPrice.fromJS(item));
            }
            if (data["userIdentities"] && data["userIdentities"].constructor === Array) {
                this.userIdentities = [];
                for (let item of data["userIdentities"])
                    this.userIdentities.push(UserIdentity.fromJS(item));
            }
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>null;
            this.publicFolder = data["publicFolder"] ? Folder.fromJS(data["publicFolder"]) : <any>null;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["azureId"] = this.azureId !== undefined ? this.azureId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["jobPosition"] = this.jobPosition !== undefined ? this.jobPosition : <any>null;
        data["bio"] = this.bio !== undefined ? this.bio : <any>null;
        data["profilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["isPhotographer"] = this.isPhotographer !== undefined ? this.isPhotographer : <any>null;
        data["isDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : <any>null;
        data["facebook"] = this.facebook !== undefined ? this.facebook : <any>null;
        data["twitter"] = this.twitter !== undefined ? this.twitter : <any>null;
        data["instagram"] = this.instagram !== undefined ? this.instagram : <any>null;
        data["dribbble"] = this.dribbble !== undefined ? this.dribbble : <any>null;
        data["templateSelected"] = this.templateSelected !== undefined ? this.templateSelected : <any>null;
        data["purchaseTour"] = this.purchaseTour !== undefined ? this.purchaseTour : <any>null;
        data["dashboardTour"] = this.dashboardTour !== undefined ? this.dashboardTour : <any>null;
        data["photoTour"] = this.photoTour !== undefined ? this.photoTour : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        if (this.socialMedia && this.socialMedia.constructor === Array) {
            data["socialMedia"] = [];
            for (let item of this.socialMedia)
                data["socialMedia"].push(item.toJSON());
        }
        if (this.folders && this.folders.constructor === Array) {
            data["folders"] = [];
            for (let item of this.folders)
                data["folders"].push(item.toJSON());
        }
        if (this.order && this.order.constructor === Array) {
            data["order"] = [];
            for (let item of this.order)
                data["order"].push(item.toJSON());
        }
        if (this.photos && this.photos.constructor === Array) {
            data["photos"] = [];
            for (let item of this.photos)
                data["photos"].push(item.toJSON());
        }
        if (this.printPrice && this.printPrice.constructor === Array) {
            data["printPrice"] = [];
            for (let item of this.printPrice)
                data["printPrice"].push(item.toJSON());
        }
        if (this.userIdentities && this.userIdentities.constructor === Array) {
            data["userIdentities"] = [];
            for (let item of this.userIdentities)
                data["userIdentities"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["publicFolder"] = this.publicFolder ? this.publicFolder.toJSON() : <any>null;
        return data; 
    }
}

export interface IUser {
    id: number;
    azureId?: string | null;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    createDate: Date;
    isPhotographer?: boolean | null;
    isDeactivated?: boolean | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    templateSelected: number;
    purchaseTour?: boolean | null;
    dashboardTour?: boolean | null;
    photoTour?: boolean | null;
    fullName?: string | null;
    socialMedia?: SocialMedia[] | null;
    folders?: Folder[] | null;
    order?: Order[] | null;
    photos?: Photo[] | null;
    printPrice?: PrintPrice[] | null;
    userIdentities?: UserIdentity[] | null;
    address?: Address | null;
    publicFolder?: Folder | null;
}

export class SocialMedia implements ISocialMedia {
    id?: string | null;
    azureId?: string | null;
    type?: string | null;
    link?: string | null;
    username?: string | null;

    constructor(data?: ISocialMedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.azureId = data["azureId"] !== undefined ? data["azureId"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.link = data["link"] !== undefined ? data["link"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
        }
    }

    static fromJS(data: any): SocialMedia {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMedia();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["azureId"] = this.azureId !== undefined ? this.azureId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["link"] = this.link !== undefined ? this.link : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        return data; 
    }
}

export interface ISocialMedia {
    id?: string | null;
    azureId?: string | null;
    type?: string | null;
    link?: string | null;
    username?: string | null;
}

export class Folder implements IFolder {
    id!: number;
    photographerId!: number;
    name?: string | null;
    isDeleted!: boolean;
    createdDate!: Date;
    photographer?: User | null;

    constructor(data?: IFolder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.photographerId = data["photographerId"] !== undefined ? data["photographerId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            this.photographer = data["photographer"] ? User.fromJS(data["photographer"]) : <any>null;
        }
    }

    static fromJS(data: any): Folder {
        data = typeof data === 'object' ? data : {};
        let result = new Folder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photographerId"] = this.photographerId !== undefined ? this.photographerId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["photographer"] = this.photographer ? this.photographer.toJSON() : <any>null;
        return data; 
    }
}

export interface IFolder {
    id: number;
    photographerId: number;
    name?: string | null;
    isDeleted: boolean;
    createdDate: Date;
    photographer?: User | null;
}

export class Order implements IOrder {
    id!: number;
    userId!: number;
    shippingAddressId?: number | null;
    billingAddressId?: number | null;
    total?: number | null;
    orderStatus?: string | null;
    orderDate!: Date;
    billingAddress?: Address | null;
    shippingAddress?: Address | null;
    user?: User | null;
    orderDetail?: OrderDetail[] | null;
    amount!: number;
    totalPaid!: number;
    earning!: number;
    calculatedTotal?: number | null;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.shippingAddressId = data["shippingAddressId"] !== undefined ? data["shippingAddressId"] : <any>null;
            this.billingAddressId = data["billingAddressId"] !== undefined ? data["billingAddressId"] : <any>null;
            this.total = data["total"] !== undefined ? data["total"] : <any>null;
            this.orderStatus = data["orderStatus"] !== undefined ? data["orderStatus"] : <any>null;
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>null;
            this.billingAddress = data["billingAddress"] ? Address.fromJS(data["billingAddress"]) : <any>null;
            this.shippingAddress = data["shippingAddress"] ? Address.fromJS(data["shippingAddress"]) : <any>null;
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>null;
            if (data["orderDetail"] && data["orderDetail"].constructor === Array) {
                this.orderDetail = [];
                for (let item of data["orderDetail"])
                    this.orderDetail.push(OrderDetail.fromJS(item));
            }
            this.amount = data["amount"] !== undefined ? data["amount"] : <any>null;
            this.totalPaid = data["totalPaid"] !== undefined ? data["totalPaid"] : <any>null;
            this.earning = data["earning"] !== undefined ? data["earning"] : <any>null;
            this.calculatedTotal = data["calculatedTotal"] !== undefined ? data["calculatedTotal"] : <any>null;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["shippingAddressId"] = this.shippingAddressId !== undefined ? this.shippingAddressId : <any>null;
        data["billingAddressId"] = this.billingAddressId !== undefined ? this.billingAddressId : <any>null;
        data["total"] = this.total !== undefined ? this.total : <any>null;
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>null;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        if (this.orderDetail && this.orderDetail.constructor === Array) {
            data["orderDetail"] = [];
            for (let item of this.orderDetail)
                data["orderDetail"].push(item.toJSON());
        }
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["totalPaid"] = this.totalPaid !== undefined ? this.totalPaid : <any>null;
        data["earning"] = this.earning !== undefined ? this.earning : <any>null;
        data["calculatedTotal"] = this.calculatedTotal !== undefined ? this.calculatedTotal : <any>null;
        return data; 
    }
}

export interface IOrder {
    id: number;
    userId: number;
    shippingAddressId?: number | null;
    billingAddressId?: number | null;
    total?: number | null;
    orderStatus?: string | null;
    orderDate: Date;
    billingAddress?: Address | null;
    shippingAddress?: Address | null;
    user?: User | null;
    orderDetail?: OrderDetail[] | null;
    amount: number;
    totalPaid: number;
    earning: number;
    calculatedTotal?: number | null;
}

export class Address implements IAddress {
    id!: number;
    userId!: number;
    fullName?: string | null;
    address1?: string | null;
    address2?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
    country?: string | null;
    phone?: string | null;
    email?: string | null;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : <any>null;
            this.address1 = data["address1"] !== undefined ? data["address1"] : <any>null;
            this.address2 = data["address2"] !== undefined ? data["address2"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.zipCode = data["zipCode"] !== undefined ? data["zipCode"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.phone = data["phone"] !== undefined ? data["phone"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["zipCode"] = this.zipCode !== undefined ? this.zipCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data; 
    }
}

export interface IAddress {
    id: number;
    userId: number;
    fullName?: string | null;
    address1?: string | null;
    address2?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
    country?: string | null;
    phone?: string | null;
    email?: string | null;
}

export class OrderDetail implements IOrderDetail {
    id!: number;
    orderId!: number;
    photoId!: number;
    quantity!: number;
    printTypeId?: number | null;
    unitPrice!: number;
    photo?: Photo | null;
    printType?: PrintType | null;

    constructor(data?: IOrderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.orderId = data["orderId"] !== undefined ? data["orderId"] : <any>null;
            this.photoId = data["photoId"] !== undefined ? data["photoId"] : <any>null;
            this.quantity = data["quantity"] !== undefined ? data["quantity"] : <any>null;
            this.printTypeId = data["printTypeId"] !== undefined ? data["printTypeId"] : <any>null;
            this.unitPrice = data["unitPrice"] !== undefined ? data["unitPrice"] : <any>null;
            this.photo = data["photo"] ? Photo.fromJS(data["photo"]) : <any>null;
            this.printType = data["printType"] ? PrintType.fromJS(data["printType"]) : <any>null;
        }
    }

    static fromJS(data: any): OrderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["photoId"] = this.photoId !== undefined ? this.photoId : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["printTypeId"] = this.printTypeId !== undefined ? this.printTypeId : <any>null;
        data["unitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        data["photo"] = this.photo ? this.photo.toJSON() : <any>null;
        data["printType"] = this.printType ? this.printType.toJSON() : <any>null;
        return data; 
    }
}

export interface IOrderDetail {
    id: number;
    orderId: number;
    photoId: number;
    quantity: number;
    printTypeId?: number | null;
    unitPrice: number;
    photo?: Photo | null;
    printType?: PrintType | null;
}

export class PrintType implements IPrintType {
    id!: number;
    type?: string | null;
    height?: string | null;
    length?: string | null;
    icon?: string | null;
    baseCost!: number;

    constructor(data?: IPrintType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.height = data["height"] !== undefined ? data["height"] : <any>null;
            this.length = data["length"] !== undefined ? data["length"] : <any>null;
            this.icon = data["icon"] !== undefined ? data["icon"] : <any>null;
            this.baseCost = data["baseCost"] !== undefined ? data["baseCost"] : <any>null;
        }
    }

    static fromJS(data: any): PrintType {
        data = typeof data === 'object' ? data : {};
        let result = new PrintType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["icon"] = this.icon !== undefined ? this.icon : <any>null;
        data["baseCost"] = this.baseCost !== undefined ? this.baseCost : <any>null;
        return data; 
    }
}

export interface IPrintType {
    id: number;
    type?: string | null;
    height?: string | null;
    length?: string | null;
    icon?: string | null;
    baseCost: number;
}

export class PrintPrice implements IPrintPrice {
    id!: number;
    photoId!: number;
    price!: number;
    photographerId!: number;
    photographer?: User | null;

    constructor(data?: IPrintPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.photoId = data["photoId"] !== undefined ? data["photoId"] : <any>null;
            this.price = data["price"] !== undefined ? data["price"] : <any>null;
            this.photographerId = data["photographerId"] !== undefined ? data["photographerId"] : <any>null;
            this.photographer = data["photographer"] ? User.fromJS(data["photographer"]) : <any>null;
        }
    }

    static fromJS(data: any): PrintPrice {
        data = typeof data === 'object' ? data : {};
        let result = new PrintPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photoId"] = this.photoId !== undefined ? this.photoId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["photographerId"] = this.photographerId !== undefined ? this.photographerId : <any>null;
        data["photographer"] = this.photographer ? this.photographer.toJSON() : <any>null;
        return data; 
    }
}

export interface IPrintPrice {
    id: number;
    photoId: number;
    price: number;
    photographerId: number;
    photographer?: User | null;
}

export class UserIdentity implements IUserIdentity {
    azureID?: string | null;
    identityProvider?: string | null;
    userID!: number;
    createDate!: Date;
    lastLoginDate?: Date | null;
    user?: User | null;

    constructor(data?: IUserIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.azureID = data["azureID"] !== undefined ? data["azureID"] : <any>null;
            this.identityProvider = data["identityProvider"] !== undefined ? data["identityProvider"] : <any>null;
            this.userID = data["userID"] !== undefined ? data["userID"] : <any>null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>null;
            this.lastLoginDate = data["lastLoginDate"] ? new Date(data["lastLoginDate"].toString()) : <any>null;
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>null;
        }
    }

    static fromJS(data: any): UserIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new UserIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["azureID"] = this.azureID !== undefined ? this.azureID : <any>null;
        data["identityProvider"] = this.identityProvider !== undefined ? this.identityProvider : <any>null;
        data["userID"] = this.userID !== undefined ? this.userID : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data; 
    }
}

export interface IUserIdentity {
    azureID?: string | null;
    identityProvider?: string | null;
    userID: number;
    createDate: Date;
    lastLoginDate?: Date | null;
    user?: User | null;
}

export class PhotoTag implements IPhotoTag {
    photoId!: number;
    tagId!: number;
    registerDate!: Date;
    photo?: Photo | null;
    tag?: Tag | null;

    constructor(data?: IPhotoTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.photoId = data["photoId"] !== undefined ? data["photoId"] : <any>null;
            this.tagId = data["tagId"] !== undefined ? data["tagId"] : <any>null;
            this.registerDate = data["registerDate"] ? new Date(data["registerDate"].toString()) : <any>null;
            this.photo = data["photo"] ? Photo.fromJS(data["photo"]) : <any>null;
            this.tag = data["tag"] ? Tag.fromJS(data["tag"]) : <any>null;
        }
    }

    static fromJS(data: any): PhotoTag {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["photoId"] = this.photoId !== undefined ? this.photoId : <any>null;
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>null;
        data["photo"] = this.photo ? this.photo.toJSON() : <any>null;
        data["tag"] = this.tag ? this.tag.toJSON() : <any>null;
        return data; 
    }
}

export interface IPhotoTag {
    photoId: number;
    tagId: number;
    registerDate: Date;
    photo?: Photo | null;
    tag?: Tag | null;
}

export class Tag implements ITag {
    id!: number;
    name?: string | null;
    photoTag?: PhotoTag[] | null;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            if (data["photoTag"] && data["photoTag"].constructor === Array) {
                this.photoTag = [];
                for (let item of data["photoTag"])
                    this.photoTag.push(PhotoTag.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (this.photoTag && this.photoTag.constructor === Array) {
            data["photoTag"] = [];
            for (let item of this.photoTag)
                data["photoTag"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITag {
    id: number;
    name?: string | null;
    photoTag?: PhotoTag[] | null;
}

export abstract class MarshalByRefObject implements IMarshalByRefObject {

    constructor(data?: IMarshalByRefObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): MarshalByRefObject {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'MarshalByRefObject' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IMarshalByRefObject {
}

export abstract class Stream extends MarshalByRefObject implements IStream {
    canTimeout!: boolean;
    readTimeout!: number;
    writeTimeout!: number;

    constructor(data?: IStream) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.canTimeout = data["canTimeout"] !== undefined ? data["canTimeout"] : <any>null;
            this.readTimeout = data["readTimeout"] !== undefined ? data["readTimeout"] : <any>null;
            this.writeTimeout = data["writeTimeout"] !== undefined ? data["writeTimeout"] : <any>null;
        }
    }

    static fromJS(data: any): Stream {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Stream' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTimeout"] = this.canTimeout !== undefined ? this.canTimeout : <any>null;
        data["readTimeout"] = this.readTimeout !== undefined ? this.readTimeout : <any>null;
        data["writeTimeout"] = this.writeTimeout !== undefined ? this.writeTimeout : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IStream extends IMarshalByRefObject {
    canTimeout: boolean;
    readTimeout: number;
    writeTimeout: number;
}

export class PhotoViewModel implements IPhotoViewModel {
    id!: number;
    photographerId!: number;
    folderId!: number;
    url?: string | null;
    thumbnailUrl?: string | null;
    code?: string | null;
    name?: string | null;
    uploadDate!: Date;
    price?: number | null;
    resolution?: string | null;
    fileSize?: string | null;
    photographer?: User | null;
    waterMarkUrl?: string | null;

    constructor(data?: IPhotoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.photographerId = data["photographerId"] !== undefined ? data["photographerId"] : <any>null;
            this.folderId = data["folderId"] !== undefined ? data["folderId"] : <any>null;
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.thumbnailUrl = data["thumbnailUrl"] !== undefined ? data["thumbnailUrl"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.uploadDate = data["uploadDate"] ? new Date(data["uploadDate"].toString()) : <any>null;
            this.price = data["price"] !== undefined ? data["price"] : <any>null;
            this.resolution = data["resolution"] !== undefined ? data["resolution"] : <any>null;
            this.fileSize = data["fileSize"] !== undefined ? data["fileSize"] : <any>null;
            this.photographer = data["photographer"] ? User.fromJS(data["photographer"]) : <any>null;
            this.waterMarkUrl = data["waterMarkUrl"] !== undefined ? data["waterMarkUrl"] : <any>null;
        }
    }

    static fromJS(data: any): PhotoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photographerId"] = this.photographerId !== undefined ? this.photographerId : <any>null;
        data["folderId"] = this.folderId !== undefined ? this.folderId : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["thumbnailUrl"] = this.thumbnailUrl !== undefined ? this.thumbnailUrl : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["resolution"] = this.resolution !== undefined ? this.resolution : <any>null;
        data["fileSize"] = this.fileSize !== undefined ? this.fileSize : <any>null;
        data["photographer"] = this.photographer ? this.photographer.toJSON() : <any>null;
        data["waterMarkUrl"] = this.waterMarkUrl !== undefined ? this.waterMarkUrl : <any>null;
        return data; 
    }
}

export interface IPhotoViewModel {
    id: number;
    photographerId: number;
    folderId: number;
    url?: string | null;
    thumbnailUrl?: string | null;
    code?: string | null;
    name?: string | null;
    uploadDate: Date;
    price?: number | null;
    resolution?: string | null;
    fileSize?: string | null;
    photographer?: User | null;
    waterMarkUrl?: string | null;
}

export class TagViewModel implements ITagViewModel {
    id!: number;
    name?: string | null;
    text?: string | null;

    constructor(data?: ITagViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.text = data["text"] !== undefined ? data["text"] : <any>null;
        }
    }

    static fromJS(data: any): TagViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TagViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        return data; 
    }
}

export interface ITagViewModel {
    id: number;
    name?: string | null;
    text?: string | null;
}

export class BulkEditModel implements IBulkEditModel {
    photoIds?: number[] | null;
    tags?: TagModel[] | null;
    newPrice?: number | null;

    constructor(data?: IBulkEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["photoIds"] && data["photoIds"].constructor === Array) {
                this.photoIds = [];
                for (let item of data["photoIds"])
                    this.photoIds.push(item);
            }
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(TagModel.fromJS(item));
            }
            this.newPrice = data["newPrice"] !== undefined ? data["newPrice"] : <any>null;
        }
    }

    static fromJS(data: any): BulkEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new BulkEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.photoIds && this.photoIds.constructor === Array) {
            data["photoIds"] = [];
            for (let item of this.photoIds)
                data["photoIds"].push(item);
        }
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["newPrice"] = this.newPrice !== undefined ? this.newPrice : <any>null;
        return data; 
    }
}

export interface IBulkEditModel {
    photoIds?: number[] | null;
    tags?: TagModel[] | null;
    newPrice?: number | null;
}

export class TagModel implements ITagModel {
    id!: number;
    name?: string | null;

    constructor(data?: ITagModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): TagModel {
        data = typeof data === 'object' ? data : {};
        let result = new TagModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ITagModel {
    id: number;
    name?: string | null;
}

export class FolderViewModel implements IFolderViewModel {
    id!: number;
    photographerId!: number;
    name?: string | null;
    createdDate!: Date;
    photo?: PhotoViewModel[] | null;

    constructor(data?: IFolderViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.photographerId = data["photographerId"] !== undefined ? data["photographerId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            if (data["photo"] && data["photo"].constructor === Array) {
                this.photo = [];
                for (let item of data["photo"])
                    this.photo.push(PhotoViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FolderViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FolderViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photographerId"] = this.photographerId !== undefined ? this.photographerId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        if (this.photo && this.photo.constructor === Array) {
            data["photo"] = [];
            for (let item of this.photo)
                data["photo"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFolderViewModel {
    id: number;
    photographerId: number;
    name?: string | null;
    createdDate: Date;
    photo?: PhotoViewModel[] | null;
}

export class UserViewModel implements IUserViewModel {
    id!: number;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    isPhotographer?: boolean | null;
    isDeactivated?: boolean | null;
    purchaseTour?: boolean | null;
    dashboardTour?: boolean | null;
    photoTour?: boolean | null;

    constructor(data?: IUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.jobPosition = data["jobPosition"] !== undefined ? data["jobPosition"] : <any>null;
            this.bio = data["bio"] !== undefined ? data["bio"] : <any>null;
            this.profilePhotoUrl = data["profilePhotoUrl"] !== undefined ? data["profilePhotoUrl"] : <any>null;
            this.facebook = data["facebook"] !== undefined ? data["facebook"] : <any>null;
            this.twitter = data["twitter"] !== undefined ? data["twitter"] : <any>null;
            this.instagram = data["instagram"] !== undefined ? data["instagram"] : <any>null;
            this.dribbble = data["dribbble"] !== undefined ? data["dribbble"] : <any>null;
            this.isPhotographer = data["isPhotographer"] !== undefined ? data["isPhotographer"] : <any>null;
            this.isDeactivated = data["isDeactivated"] !== undefined ? data["isDeactivated"] : <any>null;
            this.purchaseTour = data["purchaseTour"] !== undefined ? data["purchaseTour"] : <any>null;
            this.dashboardTour = data["dashboardTour"] !== undefined ? data["dashboardTour"] : <any>null;
            this.photoTour = data["photoTour"] !== undefined ? data["photoTour"] : <any>null;
        }
    }

    static fromJS(data: any): UserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["jobPosition"] = this.jobPosition !== undefined ? this.jobPosition : <any>null;
        data["bio"] = this.bio !== undefined ? this.bio : <any>null;
        data["profilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : <any>null;
        data["facebook"] = this.facebook !== undefined ? this.facebook : <any>null;
        data["twitter"] = this.twitter !== undefined ? this.twitter : <any>null;
        data["instagram"] = this.instagram !== undefined ? this.instagram : <any>null;
        data["dribbble"] = this.dribbble !== undefined ? this.dribbble : <any>null;
        data["isPhotographer"] = this.isPhotographer !== undefined ? this.isPhotographer : <any>null;
        data["isDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : <any>null;
        data["purchaseTour"] = this.purchaseTour !== undefined ? this.purchaseTour : <any>null;
        data["dashboardTour"] = this.dashboardTour !== undefined ? this.dashboardTour : <any>null;
        data["photoTour"] = this.photoTour !== undefined ? this.photoTour : <any>null;
        return data; 
    }
}

export interface IUserViewModel {
    id: number;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    isPhotographer?: boolean | null;
    isDeactivated?: boolean | null;
    purchaseTour?: boolean | null;
    dashboardTour?: boolean | null;
    photoTour?: boolean | null;
}

export class UserProfileUpdateCommandModel implements IUserProfileUpdateCommandModel {
    id!: number;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    isDeactivated?: boolean | null;

    constructor(data?: IUserProfileUpdateCommandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.jobPosition = data["jobPosition"] !== undefined ? data["jobPosition"] : <any>null;
            this.bio = data["bio"] !== undefined ? data["bio"] : <any>null;
            this.profilePhotoUrl = data["profilePhotoUrl"] !== undefined ? data["profilePhotoUrl"] : <any>null;
            this.facebook = data["facebook"] !== undefined ? data["facebook"] : <any>null;
            this.twitter = data["twitter"] !== undefined ? data["twitter"] : <any>null;
            this.instagram = data["instagram"] !== undefined ? data["instagram"] : <any>null;
            this.dribbble = data["dribbble"] !== undefined ? data["dribbble"] : <any>null;
            this.isDeactivated = data["isDeactivated"] !== undefined ? data["isDeactivated"] : <any>null;
        }
    }

    static fromJS(data: any): UserProfileUpdateCommandModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileUpdateCommandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["jobPosition"] = this.jobPosition !== undefined ? this.jobPosition : <any>null;
        data["bio"] = this.bio !== undefined ? this.bio : <any>null;
        data["profilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : <any>null;
        data["facebook"] = this.facebook !== undefined ? this.facebook : <any>null;
        data["twitter"] = this.twitter !== undefined ? this.twitter : <any>null;
        data["instagram"] = this.instagram !== undefined ? this.instagram : <any>null;
        data["dribbble"] = this.dribbble !== undefined ? this.dribbble : <any>null;
        data["isDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : <any>null;
        return data; 
    }
}

export interface IUserProfileUpdateCommandModel {
    id: number;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    displayName?: string | null;
    jobPosition?: string | null;
    bio?: string | null;
    profilePhotoUrl?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    dribbble?: string | null;
    isDeactivated?: boolean | null;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(q: ng.IQService, message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): ng.IPromise<any> {
    if(result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => { 
        let reader = new FileReader(); 
        reader.onload = event => resolve((<any>event.target).result);
        reader.readAsText(blob); 
    });
}

}