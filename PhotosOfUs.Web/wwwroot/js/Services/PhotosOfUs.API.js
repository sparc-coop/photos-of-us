/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var PhotosOfUs;
(function (PhotosOfUs) {
    class PhotographerClient {
        constructor($http, $q, baseUrl) {
            this.baseUrl = undefined;
            this.jsonParseReviver = undefined;
            this.http = $http;
            this.q = $q;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        uploadProfilePhoto(contentType, contentDisposition, headers, length, name, fileName) {
            let url_ = this.baseUrl + "/api/Photographer/ProfilePhoto?";
            if (contentType !== undefined)
                url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&";
            if (contentDisposition !== undefined)
                url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&";
            if (headers !== undefined)
                url_ += "Headers=" + encodeURIComponent("" + headers) + "&";
            if (length === null)
                throw new Error("The parameter 'length' cannot be null.");
            else if (length !== undefined)
                url_ += "Length=" + encodeURIComponent("" + length) + "&";
            if (name !== undefined)
                url_ += "Name=" + encodeURIComponent("" + name) + "&";
            if (fileName !== undefined)
                url_ += "FileName=" + encodeURIComponent("" + fileName) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processUploadProfilePhoto(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processUploadProfilePhoto(_response);
                throw _response;
            });
        }
        processUploadProfilePhoto(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? UploadPhotoCommandResult.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        uploadProfileImage(contentType, contentDisposition, headers, length, name, fileName, photoName, extension) {
            let url_ = this.baseUrl + "/api/Photographer?";
            if (contentType !== undefined)
                url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&";
            if (contentDisposition !== undefined)
                url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&";
            if (headers !== undefined)
                url_ += "Headers=" + encodeURIComponent("" + headers) + "&";
            if (length === null)
                throw new Error("The parameter 'length' cannot be null.");
            else if (length !== undefined)
                url_ += "Length=" + encodeURIComponent("" + length) + "&";
            if (name !== undefined)
                url_ += "Name=" + encodeURIComponent("" + name) + "&";
            if (fileName !== undefined)
                url_ += "FileName=" + encodeURIComponent("" + fileName) + "&";
            if (photoName !== undefined)
                url_ += "photoName=" + encodeURIComponent("" + photoName) + "&";
            if (extension !== undefined)
                url_ += "extension=" + encodeURIComponent("" + extension) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "UNDEFINED",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processUploadProfileImage(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processUploadProfileImage(_response);
                throw _response;
            });
        }
        processUploadProfileImage(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
    }
    PhotosOfUs.PhotographerClient = PhotographerClient;
    class EventApiClient {
        constructor($http, $q, baseUrl) {
            this.baseUrl = undefined;
            this.jsonParseReviver = undefined;
            this.http = $http;
            this.q = $q;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        get(eventId) {
            let url_ = this.baseUrl + "/api/Events/{eventId}";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGet(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGet(_response);
                throw _response;
            });
        }
        processGet(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Event.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        getEventCards(eventId) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/Cards";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGetEventCards(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGetEventCards(_response);
                throw _response;
            });
        }
        processGetEventCards(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Card.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        createEventCards(eventId, quantity) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/Cards";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(quantity);
            var options_ = {
                url: url_,
                method: "POST",
                data: content_,
                transformResponse: [],
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processCreateEventCards(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processCreateEventCards(_response);
                throw _response;
            });
        }
        processCreateEventCards(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Card.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        getCodePhotos(eventId, code) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/Cards/{code}";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            if (code === undefined || code === null)
                throw new Error("The parameter 'code' must be defined.");
            url_ = url_.replace("{code}", encodeURIComponent("" + code));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGetCodePhotos(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGetCodePhotos(_response);
                throw _response;
            });
        }
        processGetCodePhotos(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(PhotoViewModel.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        uploadPhoto(eventId, photoCode, contentType, contentDisposition, headers, length, name, fileName) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/Photos?";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            if (photoCode !== undefined)
                url_ += "photoCode=" + encodeURIComponent("" + photoCode) + "&";
            if (contentType !== undefined)
                url_ += "ContentType=" + encodeURIComponent("" + contentType) + "&";
            if (contentDisposition !== undefined)
                url_ += "ContentDisposition=" + encodeURIComponent("" + contentDisposition) + "&";
            if (headers !== undefined)
                url_ += "Headers=" + encodeURIComponent("" + headers) + "&";
            if (length === null)
                throw new Error("The parameter 'length' cannot be null.");
            else if (length !== undefined)
                url_ += "Length=" + encodeURIComponent("" + length) + "&";
            if (name !== undefined)
                url_ += "Name=" + encodeURIComponent("" + name) + "&";
            if (fileName !== undefined)
                url_ += "FileName=" + encodeURIComponent("" + fileName) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processUploadPhoto(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processUploadPhoto(_response);
                throw _response;
            });
        }
        processUploadPhoto(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? UploadPhotoCommandResult.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        getAllTags(eventId) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/Tags";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGetAllTags(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGetAllTags(_response);
                throw _response;
            });
        }
        processGetAllTags(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(TagViewModel.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        bulkEdit(eventId, photoIds) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/BulkEdit?";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            if (photoIds !== undefined)
                photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processBulkEdit(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processBulkEdit(_response);
                throw _response;
            });
        }
        processBulkEdit(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(TagViewModel.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        bulkEditSave(eventId, photoIds, model) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/BulkEdit?";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            if (photoIds !== undefined)
                photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(model);
            var options_ = {
                url: url_,
                method: "PUT",
                data: content_,
                transformResponse: [],
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.http(options_).then((_response) => {
                return this.processBulkEditSave(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processBulkEditSave(_response);
                throw _response;
            });
        }
        processBulkEditSave(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        bulkDelete(eventId, photoIds) {
            let url_ = this.baseUrl + "/api/Events/{eventId}/BulkEdit?";
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            if (photoIds !== undefined)
                photoIds && photoIds.forEach(item => { url_ += "photoIds=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "DELETE",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processBulkDelete(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processBulkDelete(_response);
                throw _response;
            });
        }
        processBulkDelete(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        cardsPdf(json) {
            let url_ = this.baseUrl + "/api/Events/CardsPdf?";
            if (json !== undefined)
                url_ += "json=" + encodeURIComponent("" + json) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "UNDEFINED",
                responseType: "arraybuffer",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processCardsPdf(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processCardsPdf(_response);
                throw _response;
            });
        }
        processCardsPdf(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200 || status === 206) {
                const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
            }
            else if (status !== 200 && status !== 204) {
                return blobToText(new Blob([response]), this.q).then(_responseText => {
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return this.q.resolve(null);
        }
    }
    PhotosOfUs.EventApiClient = EventApiClient;
    class FolderApiClient {
        constructor($http, $q, baseUrl) {
            this.baseUrl = undefined;
            this.jsonParseReviver = undefined;
            this.http = $http;
            this.q = $q;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        post(name) {
            let url_ = this.baseUrl + "/api/Folder/{name}";
            if (name === undefined || name === null)
                throw new Error("The parameter 'name' must be defined.");
            url_ = url_.replace("{name}", encodeURIComponent("" + name));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processPost(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processPost(_response);
                throw _response;
            });
        }
        processPost(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? FolderViewModel.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        put(id, newName) {
            let url_ = this.baseUrl + "/api/Folder/RenameFolder?";
            if (id === null)
                throw new Error("The parameter 'id' cannot be null.");
            else if (id !== undefined)
                url_ += "id=" + encodeURIComponent("" + id) + "&";
            if (newName !== undefined)
                url_ += "newName=" + encodeURIComponent("" + newName) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processPut(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processPut(_response);
                throw _response;
            });
        }
        processPut(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? FolderViewModel.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        deleteFolder(id, userId) {
            let url_ = this.baseUrl + "/api/Folder/DeleteFolder/{id}/{userId}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                responseType: "arraybuffer",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processDeleteFolder(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processDeleteFolder(_response);
                throw _response;
            });
        }
        processDeleteFolder(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200 || status === 206) {
                const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
            }
            else if (status !== 200 && status !== 204) {
                return blobToText(new Blob([response]), this.q).then(_responseText => {
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return this.q.resolve(null);
        }
    }
    PhotosOfUs.FolderApiClient = FolderApiClient;
    class RandomPhotoClient {
        constructor($http, $q, baseUrl) {
            this.baseUrl = undefined;
            this.jsonParseReviver = undefined;
            this.http = $http;
            this.q = $q;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        get() {
            let url_ = this.baseUrl + "/api/RandomPhotos";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGet(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGet(_response);
                throw _response;
            });
        }
        processGet(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? PhotoViewModel.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
    }
    PhotosOfUs.RandomPhotoClient = RandomPhotoClient;
    class UserApiClient {
        constructor($http, $q, baseUrl) {
            this.baseUrl = undefined;
            this.jsonParseReviver = undefined;
            this.http = $http;
            this.q = $q;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        get() {
            let url_ = this.baseUrl + "/api/User";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGet(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGet(_response);
                throw _response;
            });
        }
        processGet(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? UserViewModel.fromJS(resultData200) : null;
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        put(model) {
            let url_ = this.baseUrl + "/api/User";
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(model);
            var options_ = {
                url: url_,
                method: "PUT",
                responseType: "arraybuffer",
                data: content_,
                transformResponse: [],
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processPut(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processPut(_response);
                throw _response;
            });
        }
        processPut(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200 || status === 206) {
                const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
                const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
            }
            else if (status !== 200 && status !== 204) {
                return blobToText(new Blob([response]), this.q).then(_responseText => {
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return this.q.resolve(null);
        }
        deactivateAccount() {
            let url_ = this.baseUrl + "/api/User";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "DELETE",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processDeactivateAccount(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processDeactivateAccount(_response);
                throw _response;
            });
        }
        processDeactivateAccount(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        reactivateAccount() {
            let url_ = this.baseUrl + "/api/User";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processReactivateAccount(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processReactivateAccount(_response);
                throw _response;
            });
        }
        processReactivateAccount(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        getFolders(id) {
            let url_ = this.baseUrl + "/api/User/Folders?";
            if (id === null)
                throw new Error("The parameter 'id' cannot be null.");
            else if (id !== undefined)
                url_ += "id=" + encodeURIComponent("" + id) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGetFolders(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGetFolders(_response);
                throw _response;
            });
        }
        processGetFolders(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(FolderViewModel.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        getProfilePhotos(userId) {
            let url_ = this.baseUrl + "/api/User/GetProfilePhotos/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "GET",
                transformResponse: [],
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.http(options_).then((_response) => {
                return this.processGetProfilePhotos(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processGetProfilePhotos(_response);
                throw _response;
            });
        }
        processGetProfilePhotos(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Photo.fromJS(item));
                }
                return this.q.resolve(result200);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        viewedPricingInfo(userId) {
            let url_ = this.baseUrl + "/api/User/ViewedPricing/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processViewedPricingInfo(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processViewedPricingInfo(_response);
                throw _response;
            });
        }
        processViewedPricingInfo(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        viewedDashboardTour(userId) {
            let url_ = this.baseUrl + "/api/User/ViewedDashboard/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processViewedDashboardTour(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processViewedDashboardTour(_response);
                throw _response;
            });
        }
        processViewedDashboardTour(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
        viewedPhotoTour(userId) {
            let url_ = this.baseUrl + "/api/User/ViewedPhoto/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                url: url_,
                method: "POST",
                transformResponse: [],
                headers: {}
            };
            return this.http(options_).then((_response) => {
                return this.processViewedPhotoTour(_response);
            }, (_response) => {
                if (_response.status)
                    return this.processViewedPhotoTour(_response);
                throw _response;
            });
        }
        processViewedPhotoTour(response) {
            const status = response.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = response.data;
                return this.q.resolve(null);
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = response.data;
                return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            }
            return this.q.resolve(null);
        }
    }
    PhotosOfUs.UserApiClient = UserApiClient;
    class UploadPhotoCommandResult {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                if (data["SuggestedTags"] && data["SuggestedTags"].constructor === Array) {
                    this.suggestedTags = [];
                    for (let item of data["SuggestedTags"])
                        this.suggestedTags.push(item);
                }
                this.code = data["Code"] !== undefined ? data["Code"] : null;
                this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new UploadPhotoCommandResult();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            if (this.suggestedTags && this.suggestedTags.constructor === Array) {
                data["SuggestedTags"] = [];
                for (let item of this.suggestedTags)
                    data["SuggestedTags"].push(item);
            }
            data["Code"] = this.code !== undefined ? this.code : null;
            data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
            return data;
        }
    }
    PhotosOfUs.UploadPhotoCommandResult = UploadPhotoCommandResult;
    class IHeaderDictionary {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
            if (!data) {
                this.item = [];
            }
        }
        init(data) {
            if (data) {
                if (data["Item"] && data["Item"].constructor === Array) {
                    this.item = [];
                    for (let item of data["Item"])
                        this.item.push(item);
                }
                this.contentLength = data["ContentLength"] !== undefined ? data["ContentLength"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            throw new Error("The abstract class 'IHeaderDictionary' cannot be instantiated.");
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            if (this.item && this.item.constructor === Array) {
                data["Item"] = [];
                for (let item of this.item)
                    data["Item"].push(item);
            }
            data["ContentLength"] = this.contentLength !== undefined ? this.contentLength : null;
            return data;
        }
    }
    PhotosOfUs.IHeaderDictionary = IHeaderDictionary;
    class Event {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.eventId = data["EventId"] !== undefined ? data["EventId"] : null;
                this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.url = data["Url"] !== undefined ? data["Url"] : null;
                this.pageTitle = data["PageTitle"] !== undefined ? data["PageTitle"] : null;
                this.description = data["Description"] !== undefined ? data["Description"] : null;
                this.createdDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : null;
                this.homepageTemplate = data["HomepageTemplate"] !== undefined ? data["HomepageTemplate"] : null;
                this.personalLogoUrl = data["PersonalLogoUrl"] !== undefined ? data["PersonalLogoUrl"] : null;
                this.featuredImageUrl = data["FeaturedImageUrl"] !== undefined ? data["FeaturedImageUrl"] : null;
                this.overlayColorCode = data["OverlayColorCode"] !== undefined ? data["OverlayColorCode"] : null;
                this.overlayOpacity = data["OverlayOpacity"] !== undefined ? data["OverlayOpacity"] : null;
                this.accentColorCode = data["AccentColorCode"] !== undefined ? data["AccentColorCode"] : null;
                this.backgroundColorCode = data["BackgroundColorCode"] !== undefined ? data["BackgroundColorCode"] : null;
                this.headerColorCode = data["HeaderColorCode"] !== undefined ? data["HeaderColorCode"] : null;
                this.bodyColorCode = data["BodyColorCode"] !== undefined ? data["BodyColorCode"] : null;
                this.separatorStyle = data["SeparatorStyle"] !== undefined ? data["SeparatorStyle"] : null;
                this.separatorThickness = data["SeparatorThickness"] !== undefined ? data["SeparatorThickness"] : null;
                this.separatorWidth = data["SeparatorWidth"] !== undefined ? data["SeparatorWidth"] : null;
                this.brandingStyle = data["BrandingStyle"] !== undefined ? data["BrandingStyle"] : null;
                if (data["Cards"] && data["Cards"].constructor === Array) {
                    this.cards = [];
                    for (let item of data["Cards"])
                        this.cards.push(Card.fromJS(item));
                }
                if (data["Photos"] && data["Photos"].constructor === Array) {
                    this.photos = [];
                    for (let item of data["Photos"])
                        this.photos.push(Photo.fromJS(item));
                }
                this.user = data["User"] ? User.fromJS(data["User"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Event();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["EventId"] = this.eventId !== undefined ? this.eventId : null;
            data["UserId"] = this.userId !== undefined ? this.userId : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["Url"] = this.url !== undefined ? this.url : null;
            data["PageTitle"] = this.pageTitle !== undefined ? this.pageTitle : null;
            data["Description"] = this.description !== undefined ? this.description : null;
            data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : null;
            data["HomepageTemplate"] = this.homepageTemplate !== undefined ? this.homepageTemplate : null;
            data["PersonalLogoUrl"] = this.personalLogoUrl !== undefined ? this.personalLogoUrl : null;
            data["FeaturedImageUrl"] = this.featuredImageUrl !== undefined ? this.featuredImageUrl : null;
            data["OverlayColorCode"] = this.overlayColorCode !== undefined ? this.overlayColorCode : null;
            data["OverlayOpacity"] = this.overlayOpacity !== undefined ? this.overlayOpacity : null;
            data["AccentColorCode"] = this.accentColorCode !== undefined ? this.accentColorCode : null;
            data["BackgroundColorCode"] = this.backgroundColorCode !== undefined ? this.backgroundColorCode : null;
            data["HeaderColorCode"] = this.headerColorCode !== undefined ? this.headerColorCode : null;
            data["BodyColorCode"] = this.bodyColorCode !== undefined ? this.bodyColorCode : null;
            data["SeparatorStyle"] = this.separatorStyle !== undefined ? this.separatorStyle : null;
            data["SeparatorThickness"] = this.separatorThickness !== undefined ? this.separatorThickness : null;
            data["SeparatorWidth"] = this.separatorWidth !== undefined ? this.separatorWidth : null;
            data["BrandingStyle"] = this.brandingStyle !== undefined ? this.brandingStyle : null;
            if (this.cards && this.cards.constructor === Array) {
                data["Cards"] = [];
                for (let item of this.cards)
                    data["Cards"].push(item.toJSON());
            }
            if (this.photos && this.photos.constructor === Array) {
                data["Photos"] = [];
                for (let item of this.photos)
                    data["Photos"].push(item.toJSON());
            }
            data["User"] = this.user ? this.user.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.Event = Event;
    class Card {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.eventId = data["EventId"] !== undefined ? data["EventId"] : null;
                this.code = data["Code"] !== undefined ? data["Code"] : null;
                this.createdDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : null;
                if (data["Photos"] && data["Photos"].constructor === Array) {
                    this.photos = [];
                    for (let item of data["Photos"])
                        this.photos.push(Photo.fromJS(item));
                }
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Card();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["EventId"] = this.eventId !== undefined ? this.eventId : null;
            data["Code"] = this.code !== undefined ? this.code : null;
            data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : null;
            if (this.photos && this.photos.constructor === Array) {
                data["Photos"] = [];
                for (let item of this.photos)
                    data["Photos"].push(item.toJSON());
            }
            return data;
        }
    }
    PhotosOfUs.Card = Card;
    class Photo {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.photographerId = data["PhotographerId"] !== undefined ? data["PhotographerId"] : null;
                this.url = data["Url"] !== undefined ? data["Url"] : null;
                this.price = data["Price"] !== undefined ? data["Price"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.uploadDate = data["UploadDate"] ? new Date(data["UploadDate"].toString()) : null;
                this.publicProfile = data["PublicProfile"] !== undefined ? data["PublicProfile"] : null;
                this.isDeleted = data["IsDeleted"] !== undefined ? data["IsDeleted"] : null;
                this.eventId = data["EventId"] !== undefined ? data["EventId"] : null;
                this.cardId = data["CardId"] !== undefined ? data["CardId"] : null;
                this.photographer = data["Photographer"] ? User.fromJS(data["Photographer"]) : null;
                if (data["PhotoTag"] && data["PhotoTag"].constructor === Array) {
                    this.photoTag = [];
                    for (let item of data["PhotoTag"])
                        this.photoTag.push(PhotoTag.fromJS(item));
                }
                if (data["PrintType"] && data["PrintType"].constructor === Array) {
                    this.printType = [];
                    for (let item of data["PrintType"])
                        this.printType.push(PrintType.fromJS(item));
                }
                this.filename = data["Filename"] !== undefined ? data["Filename"] : null;
                this.folderName = data["FolderName"] !== undefined ? data["FolderName"] : null;
                this.fileSize = data["FileSize"] !== undefined ? data["FileSize"] : null;
                this.resolution = data["Resolution"] !== undefined ? data["Resolution"] : null;
                this.stream = data["Stream"] ? Stream.fromJS(data["Stream"]) : null;
                this.thumbnailUrl = data["ThumbnailUrl"] !== undefined ? data["ThumbnailUrl"] : null;
                this.waterMarkUrl = data["WaterMarkUrl"] !== undefined ? data["WaterMarkUrl"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Photo();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["PhotographerId"] = this.photographerId !== undefined ? this.photographerId : null;
            data["Url"] = this.url !== undefined ? this.url : null;
            data["Price"] = this.price !== undefined ? this.price : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["UploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : null;
            data["PublicProfile"] = this.publicProfile !== undefined ? this.publicProfile : null;
            data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
            data["EventId"] = this.eventId !== undefined ? this.eventId : null;
            data["CardId"] = this.cardId !== undefined ? this.cardId : null;
            data["Photographer"] = this.photographer ? this.photographer.toJSON() : null;
            if (this.photoTag && this.photoTag.constructor === Array) {
                data["PhotoTag"] = [];
                for (let item of this.photoTag)
                    data["PhotoTag"].push(item.toJSON());
            }
            if (this.printType && this.printType.constructor === Array) {
                data["PrintType"] = [];
                for (let item of this.printType)
                    data["PrintType"].push(item.toJSON());
            }
            data["Filename"] = this.filename !== undefined ? this.filename : null;
            data["FolderName"] = this.folderName !== undefined ? this.folderName : null;
            data["FileSize"] = this.fileSize !== undefined ? this.fileSize : null;
            data["Resolution"] = this.resolution !== undefined ? this.resolution : null;
            data["Stream"] = this.stream ? this.stream.toJSON() : null;
            data["ThumbnailUrl"] = this.thumbnailUrl !== undefined ? this.thumbnailUrl : null;
            data["WaterMarkUrl"] = this.waterMarkUrl !== undefined ? this.waterMarkUrl : null;
            return data;
        }
    }
    PhotosOfUs.Photo = Photo;
    class User {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.azureId = data["AzureId"] !== undefined ? data["AzureId"] : null;
                this.email = data["Email"] !== undefined ? data["Email"] : null;
                this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
                this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
                this.displayName = data["DisplayName"] !== undefined ? data["DisplayName"] : null;
                this.jobPosition = data["JobPosition"] !== undefined ? data["JobPosition"] : null;
                this.bio = data["Bio"] !== undefined ? data["Bio"] : null;
                this.profilePhotoUrl = data["ProfilePhotoUrl"] !== undefined ? data["ProfilePhotoUrl"] : null;
                this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : null;
                this.isPhotographer = data["IsPhotographer"] !== undefined ? data["IsPhotographer"] : null;
                this.isDeactivated = data["IsDeactivated"] !== undefined ? data["IsDeactivated"] : null;
                this.facebook = data["Facebook"] !== undefined ? data["Facebook"] : null;
                this.twitter = data["Twitter"] !== undefined ? data["Twitter"] : null;
                this.instagram = data["Instagram"] !== undefined ? data["Instagram"] : null;
                this.dribbble = data["Dribbble"] !== undefined ? data["Dribbble"] : null;
                this.templateSelected = data["TemplateSelected"] !== undefined ? data["TemplateSelected"] : null;
                this.purchaseTour = data["PurchaseTour"] !== undefined ? data["PurchaseTour"] : null;
                this.dashboardTour = data["DashboardTour"] !== undefined ? data["DashboardTour"] : null;
                this.photoTour = data["PhotoTour"] !== undefined ? data["PhotoTour"] : null;
                this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
                if (data["SocialMedia"] && data["SocialMedia"].constructor === Array) {
                    this.socialMedia = [];
                    for (let item of data["SocialMedia"])
                        this.socialMedia.push(SocialMedia.fromJS(item));
                }
                if (data["Folders"] && data["Folders"].constructor === Array) {
                    this.folders = [];
                    for (let item of data["Folders"])
                        this.folders.push(Folder.fromJS(item));
                }
                if (data["Order"] && data["Order"].constructor === Array) {
                    this.order = [];
                    for (let item of data["Order"])
                        this.order.push(Order.fromJS(item));
                }
                if (data["Photos"] && data["Photos"].constructor === Array) {
                    this.photos = [];
                    for (let item of data["Photos"])
                        this.photos.push(Photo.fromJS(item));
                }
                if (data["PrintPrice"] && data["PrintPrice"].constructor === Array) {
                    this.printPrice = [];
                    for (let item of data["PrintPrice"])
                        this.printPrice.push(PrintPrice.fromJS(item));
                }
                if (data["UserIdentities"] && data["UserIdentities"].constructor === Array) {
                    this.userIdentities = [];
                    for (let item of data["UserIdentities"])
                        this.userIdentities.push(UserIdentity.fromJS(item));
                }
                this.address = data["Address"] ? Address.fromJS(data["Address"]) : null;
                this.publicFolder = data["PublicFolder"] ? Folder.fromJS(data["PublicFolder"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new User();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["AzureId"] = this.azureId !== undefined ? this.azureId : null;
            data["Email"] = this.email !== undefined ? this.email : null;
            data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
            data["LastName"] = this.lastName !== undefined ? this.lastName : null;
            data["DisplayName"] = this.displayName !== undefined ? this.displayName : null;
            data["JobPosition"] = this.jobPosition !== undefined ? this.jobPosition : null;
            data["Bio"] = this.bio !== undefined ? this.bio : null;
            data["ProfilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : null;
            data["CreateDate"] = this.createDate ? this.createDate.toISOString() : null;
            data["IsPhotographer"] = this.isPhotographer !== undefined ? this.isPhotographer : null;
            data["IsDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : null;
            data["Facebook"] = this.facebook !== undefined ? this.facebook : null;
            data["Twitter"] = this.twitter !== undefined ? this.twitter : null;
            data["Instagram"] = this.instagram !== undefined ? this.instagram : null;
            data["Dribbble"] = this.dribbble !== undefined ? this.dribbble : null;
            data["TemplateSelected"] = this.templateSelected !== undefined ? this.templateSelected : null;
            data["PurchaseTour"] = this.purchaseTour !== undefined ? this.purchaseTour : null;
            data["DashboardTour"] = this.dashboardTour !== undefined ? this.dashboardTour : null;
            data["PhotoTour"] = this.photoTour !== undefined ? this.photoTour : null;
            data["FullName"] = this.fullName !== undefined ? this.fullName : null;
            if (this.socialMedia && this.socialMedia.constructor === Array) {
                data["SocialMedia"] = [];
                for (let item of this.socialMedia)
                    data["SocialMedia"].push(item.toJSON());
            }
            if (this.folders && this.folders.constructor === Array) {
                data["Folders"] = [];
                for (let item of this.folders)
                    data["Folders"].push(item.toJSON());
            }
            if (this.order && this.order.constructor === Array) {
                data["Order"] = [];
                for (let item of this.order)
                    data["Order"].push(item.toJSON());
            }
            if (this.photos && this.photos.constructor === Array) {
                data["Photos"] = [];
                for (let item of this.photos)
                    data["Photos"].push(item.toJSON());
            }
            if (this.printPrice && this.printPrice.constructor === Array) {
                data["PrintPrice"] = [];
                for (let item of this.printPrice)
                    data["PrintPrice"].push(item.toJSON());
            }
            if (this.userIdentities && this.userIdentities.constructor === Array) {
                data["UserIdentities"] = [];
                for (let item of this.userIdentities)
                    data["UserIdentities"].push(item.toJSON());
            }
            data["Address"] = this.address ? this.address.toJSON() : null;
            data["PublicFolder"] = this.publicFolder ? this.publicFolder.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.User = User;
    class SocialMedia {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.azureId = data["AzureId"] !== undefined ? data["AzureId"] : null;
                this.type = data["Type"] !== undefined ? data["Type"] : null;
                this.link = data["Link"] !== undefined ? data["Link"] : null;
                this.username = data["Username"] !== undefined ? data["Username"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new SocialMedia();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["AzureId"] = this.azureId !== undefined ? this.azureId : null;
            data["Type"] = this.type !== undefined ? this.type : null;
            data["Link"] = this.link !== undefined ? this.link : null;
            data["Username"] = this.username !== undefined ? this.username : null;
            return data;
        }
    }
    PhotosOfUs.SocialMedia = SocialMedia;
    class Folder {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.photographerId = data["PhotographerId"] !== undefined ? data["PhotographerId"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.isDeleted = data["IsDeleted"] !== undefined ? data["IsDeleted"] : null;
                this.createdDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : null;
                this.photographer = data["Photographer"] ? User.fromJS(data["Photographer"]) : null;
                if (data["Photo"] && data["Photo"].constructor === Array) {
                    this.photo = [];
                    for (let item of data["Photo"])
                        this.photo.push(Photo.fromJS(item));
                }
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Folder();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["PhotographerId"] = this.photographerId !== undefined ? this.photographerId : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
            data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : null;
            data["Photographer"] = this.photographer ? this.photographer.toJSON() : null;
            if (this.photo && this.photo.constructor === Array) {
                data["Photo"] = [];
                for (let item of this.photo)
                    data["Photo"].push(item.toJSON());
            }
            return data;
        }
    }
    PhotosOfUs.Folder = Folder;
    class Order {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
                this.shippingAddressId = data["ShippingAddressId"] !== undefined ? data["ShippingAddressId"] : null;
                this.billingAddressId = data["BillingAddressId"] !== undefined ? data["BillingAddressId"] : null;
                this.total = data["Total"] !== undefined ? data["Total"] : null;
                this.orderStatus = data["OrderStatus"] !== undefined ? data["OrderStatus"] : null;
                this.orderDate = data["OrderDate"] ? new Date(data["OrderDate"].toString()) : null;
                this.billingAddress = data["BillingAddress"] ? Address.fromJS(data["BillingAddress"]) : null;
                this.shippingAddress = data["ShippingAddress"] ? Address.fromJS(data["ShippingAddress"]) : null;
                this.user = data["User"] ? User.fromJS(data["User"]) : null;
                if (data["OrderDetail"] && data["OrderDetail"].constructor === Array) {
                    this.orderDetail = [];
                    for (let item of data["OrderDetail"])
                        this.orderDetail.push(OrderDetail.fromJS(item));
                }
                this.amount = data["Amount"] !== undefined ? data["Amount"] : null;
                this.totalPaid = data["TotalPaid"] !== undefined ? data["TotalPaid"] : null;
                this.earning = data["Earning"] !== undefined ? data["Earning"] : null;
                this.calculatedTotal = data["CalculatedTotal"] !== undefined ? data["CalculatedTotal"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Order();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["UserId"] = this.userId !== undefined ? this.userId : null;
            data["ShippingAddressId"] = this.shippingAddressId !== undefined ? this.shippingAddressId : null;
            data["BillingAddressId"] = this.billingAddressId !== undefined ? this.billingAddressId : null;
            data["Total"] = this.total !== undefined ? this.total : null;
            data["OrderStatus"] = this.orderStatus !== undefined ? this.orderStatus : null;
            data["OrderDate"] = this.orderDate ? this.orderDate.toISOString() : null;
            data["BillingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : null;
            data["ShippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : null;
            data["User"] = this.user ? this.user.toJSON() : null;
            if (this.orderDetail && this.orderDetail.constructor === Array) {
                data["OrderDetail"] = [];
                for (let item of this.orderDetail)
                    data["OrderDetail"].push(item.toJSON());
            }
            data["Amount"] = this.amount !== undefined ? this.amount : null;
            data["TotalPaid"] = this.totalPaid !== undefined ? this.totalPaid : null;
            data["Earning"] = this.earning !== undefined ? this.earning : null;
            data["CalculatedTotal"] = this.calculatedTotal !== undefined ? this.calculatedTotal : null;
            return data;
        }
    }
    PhotosOfUs.Order = Order;
    class Address {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
                this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
                this.address1 = data["Address1"] !== undefined ? data["Address1"] : null;
                this.address2 = data["Address2"] !== undefined ? data["Address2"] : null;
                this.city = data["City"] !== undefined ? data["City"] : null;
                this.state = data["State"] !== undefined ? data["State"] : null;
                this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
                this.country = data["Country"] !== undefined ? data["Country"] : null;
                this.phone = data["Phone"] !== undefined ? data["Phone"] : null;
                this.email = data["Email"] !== undefined ? data["Email"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Address();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["UserId"] = this.userId !== undefined ? this.userId : null;
            data["FullName"] = this.fullName !== undefined ? this.fullName : null;
            data["Address1"] = this.address1 !== undefined ? this.address1 : null;
            data["Address2"] = this.address2 !== undefined ? this.address2 : null;
            data["City"] = this.city !== undefined ? this.city : null;
            data["State"] = this.state !== undefined ? this.state : null;
            data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
            data["Country"] = this.country !== undefined ? this.country : null;
            data["Phone"] = this.phone !== undefined ? this.phone : null;
            data["Email"] = this.email !== undefined ? this.email : null;
            return data;
        }
    }
    PhotosOfUs.Address = Address;
    class OrderDetail {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.orderId = data["OrderId"] !== undefined ? data["OrderId"] : null;
                this.photoId = data["PhotoId"] !== undefined ? data["PhotoId"] : null;
                this.quantity = data["Quantity"] !== undefined ? data["Quantity"] : null;
                this.printTypeId = data["PrintTypeId"] !== undefined ? data["PrintTypeId"] : null;
                this.unitPrice = data["UnitPrice"] !== undefined ? data["UnitPrice"] : null;
                this.photo = data["Photo"] ? Photo.fromJS(data["Photo"]) : null;
                this.printType = data["PrintType"] ? PrintType.fromJS(data["PrintType"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new OrderDetail();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["OrderId"] = this.orderId !== undefined ? this.orderId : null;
            data["PhotoId"] = this.photoId !== undefined ? this.photoId : null;
            data["Quantity"] = this.quantity !== undefined ? this.quantity : null;
            data["PrintTypeId"] = this.printTypeId !== undefined ? this.printTypeId : null;
            data["UnitPrice"] = this.unitPrice !== undefined ? this.unitPrice : null;
            data["Photo"] = this.photo ? this.photo.toJSON() : null;
            data["PrintType"] = this.printType ? this.printType.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.OrderDetail = OrderDetail;
    class PrintType {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.type = data["Type"] !== undefined ? data["Type"] : null;
                this.height = data["Height"] !== undefined ? data["Height"] : null;
                this.length = data["Length"] !== undefined ? data["Length"] : null;
                this.icon = data["Icon"] !== undefined ? data["Icon"] : null;
                this.baseCost = data["BaseCost"] !== undefined ? data["BaseCost"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new PrintType();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Type"] = this.type !== undefined ? this.type : null;
            data["Height"] = this.height !== undefined ? this.height : null;
            data["Length"] = this.length !== undefined ? this.length : null;
            data["Icon"] = this.icon !== undefined ? this.icon : null;
            data["BaseCost"] = this.baseCost !== undefined ? this.baseCost : null;
            return data;
        }
    }
    PhotosOfUs.PrintType = PrintType;
    class PrintPrice {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.photoId = data["PhotoId"] !== undefined ? data["PhotoId"] : null;
                this.price = data["Price"] !== undefined ? data["Price"] : null;
                this.photographerId = data["PhotographerId"] !== undefined ? data["PhotographerId"] : null;
                this.photographer = data["Photographer"] ? User.fromJS(data["Photographer"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new PrintPrice();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["PhotoId"] = this.photoId !== undefined ? this.photoId : null;
            data["Price"] = this.price !== undefined ? this.price : null;
            data["PhotographerId"] = this.photographerId !== undefined ? this.photographerId : null;
            data["Photographer"] = this.photographer ? this.photographer.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.PrintPrice = PrintPrice;
    class UserIdentity {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.azureID = data["AzureID"] !== undefined ? data["AzureID"] : null;
                this.identityProvider = data["IdentityProvider"] !== undefined ? data["IdentityProvider"] : null;
                this.userID = data["UserID"] !== undefined ? data["UserID"] : null;
                this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : null;
                this.lastLoginDate = data["LastLoginDate"] ? new Date(data["LastLoginDate"].toString()) : null;
                this.user = data["User"] ? User.fromJS(data["User"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new UserIdentity();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["AzureID"] = this.azureID !== undefined ? this.azureID : null;
            data["IdentityProvider"] = this.identityProvider !== undefined ? this.identityProvider : null;
            data["UserID"] = this.userID !== undefined ? this.userID : null;
            data["CreateDate"] = this.createDate ? this.createDate.toISOString() : null;
            data["LastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : null;
            data["User"] = this.user ? this.user.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.UserIdentity = UserIdentity;
    class PhotoTag {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.photoId = data["PhotoId"] !== undefined ? data["PhotoId"] : null;
                this.tagId = data["TagId"] !== undefined ? data["TagId"] : null;
                this.registerDate = data["RegisterDate"] ? new Date(data["RegisterDate"].toString()) : null;
                this.photo = data["Photo"] ? Photo.fromJS(data["Photo"]) : null;
                this.tag = data["Tag"] ? Tag.fromJS(data["Tag"]) : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new PhotoTag();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["PhotoId"] = this.photoId !== undefined ? this.photoId : null;
            data["TagId"] = this.tagId !== undefined ? this.tagId : null;
            data["RegisterDate"] = this.registerDate ? this.registerDate.toISOString() : null;
            data["Photo"] = this.photo ? this.photo.toJSON() : null;
            data["Tag"] = this.tag ? this.tag.toJSON() : null;
            return data;
        }
    }
    PhotosOfUs.PhotoTag = PhotoTag;
    class Tag {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                if (data["PhotoTag"] && data["PhotoTag"].constructor === Array) {
                    this.photoTag = [];
                    for (let item of data["PhotoTag"])
                        this.photoTag.push(PhotoTag.fromJS(item));
                }
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Tag();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            if (this.photoTag && this.photoTag.constructor === Array) {
                data["PhotoTag"] = [];
                for (let item of this.photoTag)
                    data["PhotoTag"].push(item.toJSON());
            }
            return data;
        }
    }
    PhotosOfUs.Tag = Tag;
    class MarshalByRefObject {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            throw new Error("The abstract class 'MarshalByRefObject' cannot be instantiated.");
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            return data;
        }
    }
    PhotosOfUs.MarshalByRefObject = MarshalByRefObject;
    class Stream extends MarshalByRefObject {
        constructor(data) {
            super(data);
        }
        init(data) {
            super.init(data);
            if (data) {
                this.canTimeout = data["CanTimeout"] !== undefined ? data["CanTimeout"] : null;
                this.readTimeout = data["ReadTimeout"] !== undefined ? data["ReadTimeout"] : null;
                this.writeTimeout = data["WriteTimeout"] !== undefined ? data["WriteTimeout"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            throw new Error("The abstract class 'Stream' cannot be instantiated.");
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["CanTimeout"] = this.canTimeout !== undefined ? this.canTimeout : null;
            data["ReadTimeout"] = this.readTimeout !== undefined ? this.readTimeout : null;
            data["WriteTimeout"] = this.writeTimeout !== undefined ? this.writeTimeout : null;
            super.toJSON(data);
            return data;
        }
    }
    PhotosOfUs.Stream = Stream;
    class PhotoViewModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.photographerId = data["PhotographerId"] !== undefined ? data["PhotographerId"] : null;
                this.folderId = data["FolderId"] !== undefined ? data["FolderId"] : null;
                this.url = data["Url"] !== undefined ? data["Url"] : null;
                this.thumbnailUrl = data["ThumbnailUrl"] !== undefined ? data["ThumbnailUrl"] : null;
                this.code = data["Code"] !== undefined ? data["Code"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.uploadDate = data["UploadDate"] ? new Date(data["UploadDate"].toString()) : null;
                this.price = data["Price"] !== undefined ? data["Price"] : null;
                this.resolution = data["Resolution"] !== undefined ? data["Resolution"] : null;
                this.fileSize = data["FileSize"] !== undefined ? data["FileSize"] : null;
                this.photographer = data["Photographer"] ? User.fromJS(data["Photographer"]) : null;
                this.waterMarkUrl = data["WaterMarkUrl"] !== undefined ? data["WaterMarkUrl"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new PhotoViewModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["PhotographerId"] = this.photographerId !== undefined ? this.photographerId : null;
            data["FolderId"] = this.folderId !== undefined ? this.folderId : null;
            data["Url"] = this.url !== undefined ? this.url : null;
            data["ThumbnailUrl"] = this.thumbnailUrl !== undefined ? this.thumbnailUrl : null;
            data["Code"] = this.code !== undefined ? this.code : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["UploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : null;
            data["Price"] = this.price !== undefined ? this.price : null;
            data["Resolution"] = this.resolution !== undefined ? this.resolution : null;
            data["FileSize"] = this.fileSize !== undefined ? this.fileSize : null;
            data["Photographer"] = this.photographer ? this.photographer.toJSON() : null;
            data["WaterMarkUrl"] = this.waterMarkUrl !== undefined ? this.waterMarkUrl : null;
            return data;
        }
    }
    PhotosOfUs.PhotoViewModel = PhotoViewModel;
    class TagViewModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.text = data["text"] !== undefined ? data["text"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new TagViewModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["text"] = this.text !== undefined ? this.text : null;
            return data;
        }
    }
    PhotosOfUs.TagViewModel = TagViewModel;
    class BulkEditModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                if (data["photoIds"] && data["photoIds"].constructor === Array) {
                    this.photoIds = [];
                    for (let item of data["photoIds"])
                        this.photoIds.push(item);
                }
                if (data["tags"] && data["tags"].constructor === Array) {
                    this.tags = [];
                    for (let item of data["tags"])
                        this.tags.push(TagModel.fromJS(item));
                }
                this.newPrice = data["newPrice"] !== undefined ? data["newPrice"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new BulkEditModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            if (this.photoIds && this.photoIds.constructor === Array) {
                data["photoIds"] = [];
                for (let item of this.photoIds)
                    data["photoIds"].push(item);
            }
            if (this.tags && this.tags.constructor === Array) {
                data["tags"] = [];
                for (let item of this.tags)
                    data["tags"].push(item.toJSON());
            }
            data["newPrice"] = this.newPrice !== undefined ? this.newPrice : null;
            return data;
        }
    }
    PhotosOfUs.BulkEditModel = BulkEditModel;
    class TagModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new TagModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            return data;
        }
    }
    PhotosOfUs.TagModel = TagModel;
    class FolderViewModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.photographerId = data["PhotographerId"] !== undefined ? data["PhotographerId"] : null;
                this.name = data["Name"] !== undefined ? data["Name"] : null;
                this.createdDate = data["CreatedDate"] ? new Date(data["CreatedDate"].toString()) : null;
                if (data["Photo"] && data["Photo"].constructor === Array) {
                    this.photo = [];
                    for (let item of data["Photo"])
                        this.photo.push(PhotoViewModel.fromJS(item));
                }
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new FolderViewModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["PhotographerId"] = this.photographerId !== undefined ? this.photographerId : null;
            data["Name"] = this.name !== undefined ? this.name : null;
            data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : null;
            if (this.photo && this.photo.constructor === Array) {
                data["Photo"] = [];
                for (let item of this.photo)
                    data["Photo"].push(item.toJSON());
            }
            return data;
        }
    }
    PhotosOfUs.FolderViewModel = FolderViewModel;
    class UserViewModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.email = data["Email"] !== undefined ? data["Email"] : null;
                this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
                this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
                this.displayName = data["DisplayName"] !== undefined ? data["DisplayName"] : null;
                this.jobPosition = data["JobPosition"] !== undefined ? data["JobPosition"] : null;
                this.bio = data["Bio"] !== undefined ? data["Bio"] : null;
                this.profilePhotoUrl = data["ProfilePhotoUrl"] !== undefined ? data["ProfilePhotoUrl"] : null;
                this.facebook = data["Facebook"] !== undefined ? data["Facebook"] : null;
                this.twitter = data["Twitter"] !== undefined ? data["Twitter"] : null;
                this.instagram = data["Instagram"] !== undefined ? data["Instagram"] : null;
                this.dribbble = data["Dribbble"] !== undefined ? data["Dribbble"] : null;
                this.isPhotographer = data["IsPhotographer"] !== undefined ? data["IsPhotographer"] : null;
                this.isDeactivated = data["IsDeactivated"] !== undefined ? data["IsDeactivated"] : null;
                this.purchaseTour = data["PurchaseTour"] !== undefined ? data["PurchaseTour"] : null;
                this.dashboardTour = data["DashboardTour"] !== undefined ? data["DashboardTour"] : null;
                this.photoTour = data["PhotoTour"] !== undefined ? data["PhotoTour"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new UserViewModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Email"] = this.email !== undefined ? this.email : null;
            data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
            data["LastName"] = this.lastName !== undefined ? this.lastName : null;
            data["DisplayName"] = this.displayName !== undefined ? this.displayName : null;
            data["JobPosition"] = this.jobPosition !== undefined ? this.jobPosition : null;
            data["Bio"] = this.bio !== undefined ? this.bio : null;
            data["ProfilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : null;
            data["Facebook"] = this.facebook !== undefined ? this.facebook : null;
            data["Twitter"] = this.twitter !== undefined ? this.twitter : null;
            data["Instagram"] = this.instagram !== undefined ? this.instagram : null;
            data["Dribbble"] = this.dribbble !== undefined ? this.dribbble : null;
            data["IsPhotographer"] = this.isPhotographer !== undefined ? this.isPhotographer : null;
            data["IsDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : null;
            data["PurchaseTour"] = this.purchaseTour !== undefined ? this.purchaseTour : null;
            data["DashboardTour"] = this.dashboardTour !== undefined ? this.dashboardTour : null;
            data["PhotoTour"] = this.photoTour !== undefined ? this.photoTour : null;
            return data;
        }
    }
    PhotosOfUs.UserViewModel = UserViewModel;
    class UserProfileUpdateCommandModel {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(data) {
            if (data) {
                this.id = data["Id"] !== undefined ? data["Id"] : null;
                this.email = data["Email"] !== undefined ? data["Email"] : null;
                this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
                this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
                this.displayName = data["DisplayName"] !== undefined ? data["DisplayName"] : null;
                this.jobPosition = data["JobPosition"] !== undefined ? data["JobPosition"] : null;
                this.bio = data["Bio"] !== undefined ? data["Bio"] : null;
                this.profilePhotoUrl = data["ProfilePhotoUrl"] !== undefined ? data["ProfilePhotoUrl"] : null;
                this.facebook = data["Facebook"] !== undefined ? data["Facebook"] : null;
                this.twitter = data["Twitter"] !== undefined ? data["Twitter"] : null;
                this.instagram = data["Instagram"] !== undefined ? data["Instagram"] : null;
                this.dribbble = data["Dribbble"] !== undefined ? data["Dribbble"] : null;
                this.isDeactivated = data["IsDeactivated"] !== undefined ? data["IsDeactivated"] : null;
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new UserProfileUpdateCommandModel();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["Id"] = this.id !== undefined ? this.id : null;
            data["Email"] = this.email !== undefined ? this.email : null;
            data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
            data["LastName"] = this.lastName !== undefined ? this.lastName : null;
            data["DisplayName"] = this.displayName !== undefined ? this.displayName : null;
            data["JobPosition"] = this.jobPosition !== undefined ? this.jobPosition : null;
            data["Bio"] = this.bio !== undefined ? this.bio : null;
            data["ProfilePhotoUrl"] = this.profilePhotoUrl !== undefined ? this.profilePhotoUrl : null;
            data["Facebook"] = this.facebook !== undefined ? this.facebook : null;
            data["Twitter"] = this.twitter !== undefined ? this.twitter : null;
            data["Instagram"] = this.instagram !== undefined ? this.instagram : null;
            data["Dribbble"] = this.dribbble !== undefined ? this.dribbble : null;
            data["IsDeactivated"] = this.isDeactivated !== undefined ? this.isDeactivated : null;
            return data;
        }
    }
    PhotosOfUs.UserProfileUpdateCommandModel = UserProfileUpdateCommandModel;
    class SwaggerException extends Error {
        constructor(message, status, response, headers, result) {
            super();
            this.isSwaggerException = true;
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
        static isSwaggerException(obj) {
            return obj.isSwaggerException === true;
        }
    }
    PhotosOfUs.SwaggerException = SwaggerException;
    function throwException(q, message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            return q.reject(result);
        else
            return q.reject(new SwaggerException(message, status, response, headers, null));
    }
    function blobToText(blob, q) {
        return new q((resolve) => {
            let reader = new FileReader();
            reader.onload = event => resolve(event.target.result);
            reader.readAsText(blob);
        });
    }
})(PhotosOfUs || (PhotosOfUs = {}));
//# sourceMappingURL=PhotosOfUs.API.js.map